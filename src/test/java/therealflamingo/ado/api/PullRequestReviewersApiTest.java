/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.api;

import therealflamingo.ado.models.IdentityRef;
import therealflamingo.ado.models.IdentityRefWithVote;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PullRequestReviewersApi
 */
@Ignore
public class PullRequestReviewersApiTest {

    private final PullRequestReviewersApi api = new PullRequestReviewersApi();

    
    /**
     * 
     *
     * Add a reviewer to a pull request or cast a vote.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pullRequestReviewersCreatePullRequestReviewerTest() throws Exception {
        String organization = null;
        IdentityRefWithVote body = null;
        String repositoryId = null;
        Integer pullRequestId = null;
        String reviewerId = null;
        String project = null;
        String apiVersion = null;
        IdentityRefWithVote response = api.pullRequestReviewersCreatePullRequestReviewer(organization, body, repositoryId, pullRequestId, reviewerId, project, apiVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add reviewers to a pull request.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pullRequestReviewersCreatePullRequestReviewersTest() throws Exception {
        String organization = null;
        List<IdentityRef> body = null;
        String repositoryId = null;
        Integer pullRequestId = null;
        String project = null;
        String apiVersion = null;
        List<IdentityRefWithVote> response = api.pullRequestReviewersCreatePullRequestReviewers(organization, body, repositoryId, pullRequestId, project, apiVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add an unmaterialized identity to the reviewers of a pull request.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pullRequestReviewersCreateUnmaterializedPullRequestReviewerTest() throws Exception {
        String organization = null;
        IdentityRefWithVote body = null;
        String repositoryId = null;
        Integer pullRequestId = null;
        String project = null;
        String apiVersion = null;
        IdentityRefWithVote response = api.pullRequestReviewersCreateUnmaterializedPullRequestReviewer(organization, body, repositoryId, pullRequestId, project, apiVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove a reviewer from a pull request.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pullRequestReviewersDeleteTest() throws Exception {
        String organization = null;
        String repositoryId = null;
        Integer pullRequestId = null;
        String reviewerId = null;
        String project = null;
        String apiVersion = null;
        api.pullRequestReviewersDelete(organization, repositoryId, pullRequestId, reviewerId, project, apiVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve information about a particular reviewer on a pull request
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pullRequestReviewersGetTest() throws Exception {
        String organization = null;
        String repositoryId = null;
        Integer pullRequestId = null;
        String reviewerId = null;
        String project = null;
        String apiVersion = null;
        IdentityRefWithVote response = api.pullRequestReviewersGet(organization, repositoryId, pullRequestId, reviewerId, project, apiVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the reviewers for a pull request
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pullRequestReviewersListTest() throws Exception {
        String organization = null;
        String repositoryId = null;
        Integer pullRequestId = null;
        String project = null;
        String apiVersion = null;
        List<IdentityRefWithVote> response = api.pullRequestReviewersList(organization, repositoryId, pullRequestId, project, apiVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Edit a reviewer entry. These fields are patchable: isFlagged, hasDeclined
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pullRequestReviewersUpdatePullRequestReviewerTest() throws Exception {
        String organization = null;
        IdentityRefWithVote body = null;
        String repositoryId = null;
        Integer pullRequestId = null;
        String reviewerId = null;
        String project = null;
        String apiVersion = null;
        IdentityRefWithVote response = api.pullRequestReviewersUpdatePullRequestReviewer(organization, body, repositoryId, pullRequestId, reviewerId, project, apiVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Reset the votes of multiple reviewers on a pull request.  NOTE: This endpoint only supports updating votes, but does not support updating required reviewers (use policy) or display names.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pullRequestReviewersUpdatePullRequestReviewersTest() throws Exception {
        String organization = null;
        List<IdentityRefWithVote> body = null;
        String repositoryId = null;
        Integer pullRequestId = null;
        String project = null;
        String apiVersion = null;
        api.pullRequestReviewersUpdatePullRequestReviewers(organization, body, repositoryId, pullRequestId, project, apiVersion);

        // TODO: test validations
    }
    
}
