/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.api;

import therealflamingo.ado.models.GitCommit;
import therealflamingo.ado.models.GitCommitChanges;
import therealflamingo.ado.models.GitCommitRef;
import therealflamingo.ado.models.GitQueryCommitsCriteria;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommitsApi
 */
@Ignore
public class CommitsApiTest {

    private final CommitsApi api = new CommitsApi();

    
    /**
     * 
     *
     * Retrieve a particular commit.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void commitsGetTest() throws Exception {
        String organization = null;
        String commitId = null;
        String repositoryId = null;
        String project = null;
        String apiVersion = null;
        Integer changeCount = null;
        GitCommit response = api.commitsGet(organization, commitId, repositoryId, project, apiVersion, changeCount);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve changes for a particular commit.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void commitsGetChangesTest() throws Exception {
        String organization = null;
        String commitId = null;
        String repositoryId = null;
        String project = null;
        String apiVersion = null;
        Integer top = null;
        Integer skip = null;
        GitCommitChanges response = api.commitsGetChanges(organization, commitId, repositoryId, project, apiVersion, top, skip);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve git commits for a project matching the search criteria
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void commitsGetCommitsBatchTest() throws Exception {
        String organization = null;
        GitQueryCommitsCriteria body = null;
        String repositoryId = null;
        String project = null;
        String apiVersion = null;
        Integer skip = null;
        Integer top = null;
        Boolean includeStatuses = null;
        List<GitCommitRef> response = api.commitsGetCommitsBatch(organization, body, repositoryId, project, apiVersion, skip, top, includeStatuses);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a list of commits associated with a particular push.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void commitsGetPushCommitsTest() throws Exception {
        String organization = null;
        String repositoryId = null;
        Integer pushId = null;
        String project = null;
        String apiVersion = null;
        Integer top = null;
        Integer skip = null;
        Boolean includeLinks = null;
        List<GitCommitRef> response = api.commitsGetPushCommits(organization, repositoryId, pushId, project, apiVersion, top, skip, includeLinks);

        // TODO: test validations
    }
    
}
