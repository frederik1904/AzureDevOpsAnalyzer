/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.api;

import org.junit.Ignore;
import org.junit.Test;
import therealflamingo.ado.models.GitPullRequestStatus;
import therealflamingo.ado.models.JsonPatchDocument;

import java.util.List;

/**
 * API tests for PullRequestStatusesApi
 */
@Ignore
public class PullRequestStatusesApiTest {

    private final PullRequestStatusesApi api = new PullRequestStatusesApi();


    /**
     * Create a pull request status.  The only required field for the status is &#x60;Context.Name&#x60; that uniquely identifies the status. Note that you can specify iterationId in the request body to post the status on the iteration.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void pullRequestStatusesCreateTest() throws Exception {
        String organization = null;
        GitPullRequestStatus body = null;
        String repositoryId = null;
        Integer pullRequestId = null;
        String project = null;
        String apiVersion = null;
        GitPullRequestStatus response = api.pullRequestStatusesCreate(organization, body, repositoryId, pullRequestId, project, apiVersion);

        // TODO: test validations
    }

    /**
     * Delete pull request status.  You can remove multiple statuses in one call by using Update operation.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void pullRequestStatusesDeleteTest() throws Exception {
        String organization = null;
        String repositoryId = null;
        Integer pullRequestId = null;
        Integer statusId = null;
        String project = null;
        String apiVersion = null;
        api.pullRequestStatusesDelete(organization, repositoryId, pullRequestId, statusId, project, apiVersion);

        // TODO: test validations
    }

    /**
     * Get the specific pull request status by ID. The status ID is unique within the pull request across all iterations.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void pullRequestStatusesGetTest() throws Exception {
        String organization = null;
        String repositoryId = null;
        Integer pullRequestId = null;
        Integer statusId = null;
        String project = null;
        String apiVersion = null;
        GitPullRequestStatus response = api.pullRequestStatusesGet(organization, repositoryId, pullRequestId, statusId, project, apiVersion);

        // TODO: test validations
    }

    /**
     * Get all the statuses associated with a pull request.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void pullRequestStatusesListTest() throws Exception {
        String organization = null;
        String repositoryId = null;
        Integer pullRequestId = null;
        String project = null;
        String apiVersion = null;
        List<GitPullRequestStatus> response = api.pullRequestStatusesList(organization, repositoryId, pullRequestId, project, apiVersion);

        // TODO: test validations
    }

    /**
     * Update pull request statuses collection. The only supported operation type is &#x60;remove&#x60;.  This operation allows to delete multiple statuses in one call. The path of the &#x60;remove&#x60; operation should refer to the ID of the pull request status. For example &#x60;path&#x3D;\&quot;/1\&quot;&#x60; refers to the pull request status with ID 1.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void pullRequestStatusesUpdateTest() throws Exception {
        String organization = null;
        JsonPatchDocument body = null;
        String repositoryId = null;
        Integer pullRequestId = null;
        String project = null;
        String apiVersion = null;
        api.pullRequestStatusesUpdate(organization, body, repositoryId, pullRequestId, project, apiVersion);

        // TODO: test validations
    }

}
