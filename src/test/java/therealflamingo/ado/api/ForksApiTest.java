/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.api;

import org.junit.Ignore;
import org.junit.Test;
import therealflamingo.ado.models.GitForkSyncRequest;
import therealflamingo.ado.models.GitForkSyncRequestParameters;
import therealflamingo.ado.models.GitRepositoryRef;

import java.util.List;
import java.util.UUID;

/**
 * API tests for ForksApi
 */
@Ignore
public class ForksApiTest {

    private final ForksApi api = new ForksApi();


    /**
     * Request that another repository&#39;s refs be fetched into this one. It syncs two existing forks. To create a fork, please see the &lt;a href&#x3D;\&quot;https://docs.microsoft.com/en-us/rest/api/vsts/git/repositories/create?view&#x3D;azure-devops-rest-5.1\&quot;&gt; repositories endpoint&lt;/a&gt;
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void forksCreateForkSyncRequestTest() throws Exception {
        String organization = null;
        GitForkSyncRequestParameters body = null;
        String repositoryNameOrId = null;
        String project = null;
        String apiVersion = null;
        Boolean includeLinks = null;
        GitForkSyncRequest response = api.forksCreateForkSyncRequest(organization, body, repositoryNameOrId, project, apiVersion, includeLinks);

        // TODO: test validations
    }

    /**
     * Get a specific fork sync operation&#39;s details.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void forksGetForkSyncRequestTest() throws Exception {
        String organization = null;
        String repositoryNameOrId = null;
        Integer forkSyncOperationId = null;
        String project = null;
        String apiVersion = null;
        Boolean includeLinks = null;
        GitForkSyncRequest response = api.forksGetForkSyncRequest(organization, repositoryNameOrId, forkSyncOperationId, project, apiVersion, includeLinks);

        // TODO: test validations
    }

    /**
     * Retrieve all requested fork sync operations on this repository.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void forksGetForkSyncRequestsTest() throws Exception {
        String organization = null;
        String repositoryNameOrId = null;
        String project = null;
        String apiVersion = null;
        Boolean includeAbandoned = null;
        Boolean includeLinks = null;
        List<GitForkSyncRequest> response = api.forksGetForkSyncRequests(organization, repositoryNameOrId, project, apiVersion, includeAbandoned, includeLinks);

        // TODO: test validations
    }

    /**
     * Retrieve all forks of a repository in the collection.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void forksListTest() throws Exception {
        String organization = null;
        String repositoryNameOrId = null;
        UUID collectionId = null;
        String project = null;
        String apiVersion = null;
        Boolean includeLinks = null;
        List<GitRepositoryRef> response = api.forksList(organization, repositoryNameOrId, collectionId, project, apiVersion, includeLinks);

        // TODO: test validations
    }

}
