/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.models;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 *
 */
@ApiModel(description = "")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:17:42.501+02:00")
public class GitConflictUpdateResult {
  @JsonProperty("conflictId")
  private Integer conflictId = null;

  @JsonProperty("customMessage")
  private String customMessage = null;

  @JsonProperty("updatedConflict")
  private GitConflict updatedConflict = null;
  @JsonProperty("updateStatus")
  private UpdateStatusEnum updateStatus = null;

  public GitConflictUpdateResult conflictId(Integer conflictId) {
    this.conflictId = conflictId;
    return this;
  }

  /**
   * Conflict ID that was provided by input
   *
   * @return conflictId
   **/
  @ApiModelProperty(value = "Conflict ID that was provided by input")
  public Integer getConflictId() {
    return conflictId;
  }

  public void setConflictId(Integer conflictId) {
    this.conflictId = conflictId;
  }

  public GitConflictUpdateResult customMessage(String customMessage) {
    this.customMessage = customMessage;
    return this;
  }

  /**
   * Reason for failing
   *
   * @return customMessage
   **/
  @ApiModelProperty(value = "Reason for failing")
  public String getCustomMessage() {
    return customMessage;
  }

  public void setCustomMessage(String customMessage) {
    this.customMessage = customMessage;
  }

  public GitConflictUpdateResult updatedConflict(GitConflict updatedConflict) {
    this.updatedConflict = updatedConflict;
    return this;
  }

  /**
   * New state of the conflict after updating
   *
   * @return updatedConflict
   **/
  @ApiModelProperty(value = "New state of the conflict after updating")
  public GitConflict getUpdatedConflict() {
    return updatedConflict;
  }

  public void setUpdatedConflict(GitConflict updatedConflict) {
    this.updatedConflict = updatedConflict;
  }

  public GitConflictUpdateResult updateStatus(UpdateStatusEnum updateStatus) {
    this.updateStatus = updateStatus;
    return this;
  }

  /**
   * Status of the update on the server
   *
   * @return updateStatus
   **/
  @ApiModelProperty(value = "Status of the update on the server")
  public UpdateStatusEnum getUpdateStatus() {
    return updateStatus;
  }

  public void setUpdateStatus(UpdateStatusEnum updateStatus) {
    this.updateStatus = updateStatus;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitConflictUpdateResult gitConflictUpdateResult = (GitConflictUpdateResult) o;
    return Objects.equals(this.conflictId, gitConflictUpdateResult.conflictId) &&
            Objects.equals(this.customMessage, gitConflictUpdateResult.customMessage) &&
            Objects.equals(this.updatedConflict, gitConflictUpdateResult.updatedConflict) &&
            Objects.equals(this.updateStatus, gitConflictUpdateResult.updateStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conflictId, customMessage, updatedConflict, updateStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitConflictUpdateResult {\n");

    sb.append("    conflictId: ").append(toIndentedString(conflictId)).append("\n");
    sb.append("    customMessage: ").append(toIndentedString(customMessage)).append("\n");
    sb.append("    updatedConflict: ").append(toIndentedString(updatedConflict)).append("\n");
    sb.append("    updateStatus: ").append(toIndentedString(updateStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Status of the update on the server
   */
  public enum UpdateStatusEnum {
    SUCCEEDED("succeeded"),

    BADREQUEST("badRequest"),

    INVALIDRESOLUTION("invalidResolution"),

    UNSUPPORTEDCONFLICTTYPE("unsupportedConflictType"),

    NOTFOUND("notFound");

    private String value;

    UpdateStatusEnum(String value) {
      this.value = value;
    }

    @JsonCreator
    public static UpdateStatusEnum fromValue(String value) {
      for (UpdateStatusEnum b : UpdateStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

}

