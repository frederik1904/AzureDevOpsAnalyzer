/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.models;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.OffsetDateTime;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Represents a comment which is one of potentially many in a comment thread.
 */
@ApiModel(description = "Represents a comment which is one of potentially many in a comment thread.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:17:42.501+02:00")
public class Comment {
  @JsonProperty("_links")
  private ReferenceLinks links = null;

  @JsonProperty("author")
  private IdentityRef author = null;
  @JsonProperty("commentType")
  private CommentTypeEnum commentType = null;
  @JsonProperty("content")
  private String content = null;
  @JsonProperty("id")
  private Integer id = null;
  @JsonProperty("isDeleted")
  private Boolean isDeleted = null;
  @JsonProperty("lastContentUpdatedDate")
  private OffsetDateTime lastContentUpdatedDate = null;
  @JsonProperty("lastUpdatedDate")
  private OffsetDateTime lastUpdatedDate = null;
  @JsonProperty("parentCommentId")
  private Integer parentCommentId = null;
  @JsonProperty("publishedDate")
  private OffsetDateTime publishedDate = null;
  @JsonProperty("usersLiked")
  private List<IdentityRef> usersLiked = null;

  public Comment links(ReferenceLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Links to other related objects.
   *
   * @return links
   **/
  @ApiModelProperty(value = "Links to other related objects.")
  public ReferenceLinks getLinks() {
    return links;
  }

  public void setLinks(ReferenceLinks links) {
    this.links = links;
  }

  public Comment author(IdentityRef author) {
    this.author = author;
    return this;
  }

  /**
   * The author of the comment.
   *
   * @return author
   **/
  @ApiModelProperty(value = "The author of the comment.")
  public IdentityRef getAuthor() {
    return author;
  }

  public void setAuthor(IdentityRef author) {
    this.author = author;
  }

  public Comment commentType(CommentTypeEnum commentType) {
    this.commentType = commentType;
    return this;
  }

  /**
   * The comment type at the time of creation.
   *
   * @return commentType
   **/
  @ApiModelProperty(value = "The comment type at the time of creation.")
  public CommentTypeEnum getCommentType() {
    return commentType;
  }

  public void setCommentType(CommentTypeEnum commentType) {
    this.commentType = commentType;
  }

  public Comment content(String content) {
    this.content = content;
    return this;
  }

  /**
   * The comment content.
   *
   * @return content
   **/
  @ApiModelProperty(value = "The comment content.")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public Comment id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * The comment ID. IDs start at 1 and are unique to a pull request.
   *
   * @return id
   **/
  @ApiModelProperty(value = "The comment ID. IDs start at 1 and are unique to a pull request.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Comment isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * Whether or not this comment was soft-deleted.
   *
   * @return isDeleted
   **/
  @ApiModelProperty(value = "Whether or not this comment was soft-deleted.")
  public Boolean isIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }

  public Comment lastContentUpdatedDate(OffsetDateTime lastContentUpdatedDate) {
    this.lastContentUpdatedDate = lastContentUpdatedDate;
    return this;
  }

  /**
   * The date the comment&#39;s content was last updated.
   *
   * @return lastContentUpdatedDate
   **/
  @ApiModelProperty(value = "The date the comment's content was last updated.")
  public OffsetDateTime getLastContentUpdatedDate() {
    return lastContentUpdatedDate;
  }

  public void setLastContentUpdatedDate(OffsetDateTime lastContentUpdatedDate) {
    this.lastContentUpdatedDate = lastContentUpdatedDate;
  }

  public Comment lastUpdatedDate(OffsetDateTime lastUpdatedDate) {
    this.lastUpdatedDate = lastUpdatedDate;
    return this;
  }

  /**
   * The date the comment was last updated.
   *
   * @return lastUpdatedDate
   **/
  @ApiModelProperty(value = "The date the comment was last updated.")
  public OffsetDateTime getLastUpdatedDate() {
    return lastUpdatedDate;
  }

  public void setLastUpdatedDate(OffsetDateTime lastUpdatedDate) {
    this.lastUpdatedDate = lastUpdatedDate;
  }

  public Comment parentCommentId(Integer parentCommentId) {
    this.parentCommentId = parentCommentId;
    return this;
  }

  /**
   * The ID of the parent comment. This is used for replies.
   *
   * @return parentCommentId
   **/
  @ApiModelProperty(value = "The ID of the parent comment. This is used for replies.")
  public Integer getParentCommentId() {
    return parentCommentId;
  }

  public void setParentCommentId(Integer parentCommentId) {
    this.parentCommentId = parentCommentId;
  }

  public Comment publishedDate(OffsetDateTime publishedDate) {
    this.publishedDate = publishedDate;
    return this;
  }

  /**
   * The date the comment was first published.
   *
   * @return publishedDate
   **/
  @ApiModelProperty(value = "The date the comment was first published.")
  public OffsetDateTime getPublishedDate() {
    return publishedDate;
  }

  public void setPublishedDate(OffsetDateTime publishedDate) {
    this.publishedDate = publishedDate;
  }

  public Comment usersLiked(List<IdentityRef> usersLiked) {
    this.usersLiked = usersLiked;
    return this;
  }

  public Comment addUsersLikedItem(IdentityRef usersLikedItem) {
    if (this.usersLiked == null) {
      this.usersLiked = new ArrayList<IdentityRef>();
    }
    this.usersLiked.add(usersLikedItem);
    return this;
  }

  /**
   * A list of the users who have liked this comment.
   *
   * @return usersLiked
   **/
  @ApiModelProperty(value = "A list of the users who have liked this comment.")
  public List<IdentityRef> getUsersLiked() {
    return usersLiked;
  }

  public void setUsersLiked(List<IdentityRef> usersLiked) {
    this.usersLiked = usersLiked;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Comment comment = (Comment) o;
    return Objects.equals(this.links, comment.links) &&
            Objects.equals(this.author, comment.author) &&
            Objects.equals(this.commentType, comment.commentType) &&
            Objects.equals(this.content, comment.content) &&
            Objects.equals(this.id, comment.id) &&
            Objects.equals(this.isDeleted, comment.isDeleted) &&
            Objects.equals(this.lastContentUpdatedDate, comment.lastContentUpdatedDate) &&
            Objects.equals(this.lastUpdatedDate, comment.lastUpdatedDate) &&
            Objects.equals(this.parentCommentId, comment.parentCommentId) &&
            Objects.equals(this.publishedDate, comment.publishedDate) &&
            Objects.equals(this.usersLiked, comment.usersLiked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, author, commentType, content, id, isDeleted, lastContentUpdatedDate, lastUpdatedDate, parentCommentId, publishedDate, usersLiked);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Comment {\n");

    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    commentType: ").append(toIndentedString(commentType)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    lastContentUpdatedDate: ").append(toIndentedString(lastContentUpdatedDate)).append("\n");
    sb.append("    lastUpdatedDate: ").append(toIndentedString(lastUpdatedDate)).append("\n");
    sb.append("    parentCommentId: ").append(toIndentedString(parentCommentId)).append("\n");
    sb.append("    publishedDate: ").append(toIndentedString(publishedDate)).append("\n");
    sb.append("    usersLiked: ").append(toIndentedString(usersLiked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * The comment type at the time of creation.
   */
  public enum CommentTypeEnum {
    UNKNOWN("unknown"),

    TEXT("text"),

    CODECHANGE("codeChange"),

    SYSTEM("system");

    private String value;

    CommentTypeEnum(String value) {
      this.value = value;
    }

    @JsonCreator
    public static CommentTypeEnum fromValue(String value) {
      for (CommentTypeEnum b : CommentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

}

