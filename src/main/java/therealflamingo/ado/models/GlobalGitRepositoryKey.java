/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.UUID;

/**
 * Globally unique key for a repository.
 */
@ApiModel(description = "Globally unique key for a repository.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:17:42.501+02:00")
public class GlobalGitRepositoryKey {
  @JsonProperty("collectionId")
  private UUID collectionId = null;

  @JsonProperty("projectId")
  private UUID projectId = null;

  @JsonProperty("repositoryId")
  private UUID repositoryId = null;

  public GlobalGitRepositoryKey collectionId(UUID collectionId) {
    this.collectionId = collectionId;
    return this;
  }

   /**
   * Team Project Collection ID of the collection for the repository.
   * @return collectionId
  **/
  @ApiModelProperty(value = "Team Project Collection ID of the collection for the repository.")
  public UUID getCollectionId() {
    return collectionId;
  }

  public void setCollectionId(UUID collectionId) {
    this.collectionId = collectionId;
  }

  public GlobalGitRepositoryKey projectId(UUID projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Team Project ID of the project for the repository.
   * @return projectId
  **/
  @ApiModelProperty(value = "Team Project ID of the project for the repository.")
  public UUID getProjectId() {
    return projectId;
  }

  public void setProjectId(UUID projectId) {
    this.projectId = projectId;
  }

  public GlobalGitRepositoryKey repositoryId(UUID repositoryId) {
    this.repositoryId = repositoryId;
    return this;
  }

   /**
   * ID of the repository.
   * @return repositoryId
  **/
  @ApiModelProperty(value = "ID of the repository.")
  public UUID getRepositoryId() {
    return repositoryId;
  }

  public void setRepositoryId(UUID repositoryId) {
    this.repositoryId = repositoryId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GlobalGitRepositoryKey globalGitRepositoryKey = (GlobalGitRepositoryKey) o;
    return Objects.equals(this.collectionId, globalGitRepositoryKey.collectionId) &&
        Objects.equals(this.projectId, globalGitRepositoryKey.projectId) &&
        Objects.equals(this.repositoryId, globalGitRepositoryKey.repositoryId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectionId, projectId, repositoryId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GlobalGitRepositoryKey {\n");
    
    sb.append("    collectionId: ").append(toIndentedString(collectionId)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    repositoryId: ").append(toIndentedString(repositoryId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

