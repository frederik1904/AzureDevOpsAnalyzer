/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * The options which are used when a pull request merge is created.
 */
@ApiModel(description = "The options which are used when a pull request merge is created.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:17:42.501+02:00")
public class GitPullRequestMergeOptions {
  @JsonProperty("conflictAuthorshipCommits")
  private Boolean conflictAuthorshipCommits = null;

  @JsonProperty("detectRenameFalsePositives")
  private Boolean detectRenameFalsePositives = null;

  @JsonProperty("disableRenames")
  private Boolean disableRenames = null;

  public GitPullRequestMergeOptions conflictAuthorshipCommits(Boolean conflictAuthorshipCommits) {
    this.conflictAuthorshipCommits = conflictAuthorshipCommits;
    return this;
  }

  /**
   * If true, conflict resolutions applied during the merge will be put in separate commits to preserve authorship info for git blame, etc.
   *
   * @return conflictAuthorshipCommits
   **/
  @ApiModelProperty(value = "If true, conflict resolutions applied during the merge will be put in separate commits to preserve authorship info for git blame, etc.")
  public Boolean isConflictAuthorshipCommits() {
    return conflictAuthorshipCommits;
  }

  public void setConflictAuthorshipCommits(Boolean conflictAuthorshipCommits) {
    this.conflictAuthorshipCommits = conflictAuthorshipCommits;
  }

  public GitPullRequestMergeOptions detectRenameFalsePositives(Boolean detectRenameFalsePositives) {
    this.detectRenameFalsePositives = detectRenameFalsePositives;
    return this;
  }

  /**
   * If true, renames where there is more than one valid way to map the original file locations to renamed file locations will be treated as false positives and ignored.
   *
   * @return detectRenameFalsePositives
   **/
  @ApiModelProperty(value = "If true, renames where there is more than one valid way to map the original file locations to renamed file locations will be treated as false positives and ignored.")
  public Boolean isDetectRenameFalsePositives() {
    return detectRenameFalsePositives;
  }

  public void setDetectRenameFalsePositives(Boolean detectRenameFalsePositives) {
    this.detectRenameFalsePositives = detectRenameFalsePositives;
  }

  public GitPullRequestMergeOptions disableRenames(Boolean disableRenames) {
    this.disableRenames = disableRenames;
    return this;
  }

  /**
   * If true, rename detection will not be performed during the merge.
   *
   * @return disableRenames
   **/
  @ApiModelProperty(value = "If true, rename detection will not be performed during the merge.")
  public Boolean isDisableRenames() {
    return disableRenames;
  }

  public void setDisableRenames(Boolean disableRenames) {
    this.disableRenames = disableRenames;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitPullRequestMergeOptions gitPullRequestMergeOptions = (GitPullRequestMergeOptions) o;
    return Objects.equals(this.conflictAuthorshipCommits, gitPullRequestMergeOptions.conflictAuthorshipCommits) &&
            Objects.equals(this.detectRenameFalsePositives, gitPullRequestMergeOptions.detectRenameFalsePositives) &&
            Objects.equals(this.disableRenames, gitPullRequestMergeOptions.disableRenames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conflictAuthorshipCommits, detectRenameFalsePositives, disableRenames);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitPullRequestMergeOptions {\n");

    sb.append("    conflictAuthorshipCommits: ").append(toIndentedString(conflictAuthorshipCommits)).append("\n");
    sb.append("    detectRenameFalsePositives: ").append(toIndentedString(detectRenameFalsePositives)).append("\n");
    sb.append("    disableRenames: ").append(toIndentedString(disableRenames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

