/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * 
 */
@ApiModel(description = "")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:17:42.501+02:00")
public class GitItemDescriptor {
  @JsonProperty("path")
  private String path = null;

  /**
   * Specifies whether to include children (OneLevel), all descendants (Full), or None
   */
  public enum RecursionLevelEnum {
    NONE("none"),
    
    ONELEVEL("oneLevel"),
    
    ONELEVELPLUSNESTEDEMPTYFOLDERS("oneLevelPlusNestedEmptyFolders"),
    
    FULL("full");

    private String value;

    RecursionLevelEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RecursionLevelEnum fromValue(String value) {
      for (RecursionLevelEnum b : RecursionLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("recursionLevel")
  private RecursionLevelEnum recursionLevel = null;

  @JsonProperty("version")
  private String version = null;

  /**
   * Version modifiers (e.g. previous)
   */
  public enum VersionOptionsEnum {
    NONE("none"),
    
    PREVIOUSCHANGE("previousChange"),
    
    FIRSTPARENT("firstParent");

    private String value;

    VersionOptionsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VersionOptionsEnum fromValue(String value) {
      for (VersionOptionsEnum b : VersionOptionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("versionOptions")
  private VersionOptionsEnum versionOptions = null;

  /**
   * How to interpret version (branch,tag,commit)
   */
  public enum VersionTypeEnum {
    BRANCH("branch"),
    
    TAG("tag"),
    
    COMMIT("commit");

    private String value;

    VersionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VersionTypeEnum fromValue(String value) {
      for (VersionTypeEnum b : VersionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("versionType")
  private VersionTypeEnum versionType = null;

  public GitItemDescriptor path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Path to item
   * @return path
  **/
  @ApiModelProperty(value = "Path to item")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public GitItemDescriptor recursionLevel(RecursionLevelEnum recursionLevel) {
    this.recursionLevel = recursionLevel;
    return this;
  }

   /**
   * Specifies whether to include children (OneLevel), all descendants (Full), or None
   * @return recursionLevel
  **/
  @ApiModelProperty(value = "Specifies whether to include children (OneLevel), all descendants (Full), or None")
  public RecursionLevelEnum getRecursionLevel() {
    return recursionLevel;
  }

  public void setRecursionLevel(RecursionLevelEnum recursionLevel) {
    this.recursionLevel = recursionLevel;
  }

  public GitItemDescriptor version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Version string (interpretation based on VersionType defined in subclass
   * @return version
  **/
  @ApiModelProperty(value = "Version string (interpretation based on VersionType defined in subclass")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public GitItemDescriptor versionOptions(VersionOptionsEnum versionOptions) {
    this.versionOptions = versionOptions;
    return this;
  }

   /**
   * Version modifiers (e.g. previous)
   * @return versionOptions
  **/
  @ApiModelProperty(value = "Version modifiers (e.g. previous)")
  public VersionOptionsEnum getVersionOptions() {
    return versionOptions;
  }

  public void setVersionOptions(VersionOptionsEnum versionOptions) {
    this.versionOptions = versionOptions;
  }

  public GitItemDescriptor versionType(VersionTypeEnum versionType) {
    this.versionType = versionType;
    return this;
  }

   /**
   * How to interpret version (branch,tag,commit)
   * @return versionType
  **/
  @ApiModelProperty(value = "How to interpret version (branch,tag,commit)")
  public VersionTypeEnum getVersionType() {
    return versionType;
  }

  public void setVersionType(VersionTypeEnum versionType) {
    this.versionType = versionType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitItemDescriptor gitItemDescriptor = (GitItemDescriptor) o;
    return Objects.equals(this.path, gitItemDescriptor.path) &&
        Objects.equals(this.recursionLevel, gitItemDescriptor.recursionLevel) &&
        Objects.equals(this.version, gitItemDescriptor.version) &&
        Objects.equals(this.versionOptions, gitItemDescriptor.versionOptions) &&
        Objects.equals(this.versionType, gitItemDescriptor.versionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, recursionLevel, version, versionOptions, versionType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitItemDescriptor {\n");
    
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    recursionLevel: ").append(toIndentedString(recursionLevel)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    versionOptions: ").append(toIndentedString(versionOptions)).append("\n");
    sb.append("    versionType: ").append(toIndentedString(versionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

