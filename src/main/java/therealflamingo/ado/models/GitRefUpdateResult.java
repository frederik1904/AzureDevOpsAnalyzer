/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.models;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;
import java.util.UUID;

/**
 *
 */
@ApiModel(description = "")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:17:42.501+02:00")
public class GitRefUpdateResult {
    @JsonProperty("customMessage")
    private String customMessage = null;

    @JsonProperty("isLocked")
    private Boolean isLocked = null;

    @JsonProperty("name")
    private String name = null;

    @JsonProperty("newObjectId")
    private String newObjectId = null;

    @JsonProperty("oldObjectId")
    private String oldObjectId = null;

    @JsonProperty("rejectedBy")
    private String rejectedBy = null;

    @JsonProperty("repositoryId")
    private UUID repositoryId = null;

    @JsonProperty("success")
    private Boolean success = null;
    @JsonProperty("updateStatus")
    private UpdateStatusEnum updateStatus = null;

    public GitRefUpdateResult customMessage(String customMessage) {
        this.customMessage = customMessage;
        return this;
    }

    /**
     * Custom message for the result object For instance, Reason for failing.
     *
     * @return customMessage
     **/
    @ApiModelProperty(value = "Custom message for the result object For instance, Reason for failing.")
    public String getCustomMessage() {
        return customMessage;
    }

    public void setCustomMessage(String customMessage) {
        this.customMessage = customMessage;
    }

    public GitRefUpdateResult isLocked(Boolean isLocked) {
        this.isLocked = isLocked;
        return this;
    }

    /**
     * Whether the ref is locked or not
     *
     * @return isLocked
     **/
    @ApiModelProperty(value = "Whether the ref is locked or not")
    public Boolean isIsLocked() {
        return isLocked;
    }

    public void setIsLocked(Boolean isLocked) {
        this.isLocked = isLocked;
    }

    public GitRefUpdateResult name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Ref name
     *
     * @return name
     **/
    @ApiModelProperty(value = "Ref name")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public GitRefUpdateResult newObjectId(String newObjectId) {
        this.newObjectId = newObjectId;
        return this;
    }

    /**
     * New object ID
     *
     * @return newObjectId
     **/
    @ApiModelProperty(value = "New object ID")
    public String getNewObjectId() {
        return newObjectId;
    }

    public void setNewObjectId(String newObjectId) {
        this.newObjectId = newObjectId;
    }

    public GitRefUpdateResult oldObjectId(String oldObjectId) {
        this.oldObjectId = oldObjectId;
        return this;
    }

    /**
     * Old object ID
     *
     * @return oldObjectId
     **/
    @ApiModelProperty(value = "Old object ID")
    public String getOldObjectId() {
        return oldObjectId;
    }

    public void setOldObjectId(String oldObjectId) {
        this.oldObjectId = oldObjectId;
    }

    public GitRefUpdateResult rejectedBy(String rejectedBy) {
        this.rejectedBy = rejectedBy;
        return this;
    }

    /**
     * Name of the plugin that rejected the updated.
     *
     * @return rejectedBy
     **/
    @ApiModelProperty(value = "Name of the plugin that rejected the updated.")
    public String getRejectedBy() {
        return rejectedBy;
    }

    public void setRejectedBy(String rejectedBy) {
        this.rejectedBy = rejectedBy;
    }

    public GitRefUpdateResult repositoryId(UUID repositoryId) {
        this.repositoryId = repositoryId;
        return this;
    }

    /**
     * Repository ID
     *
     * @return repositoryId
     **/
    @ApiModelProperty(value = "Repository ID")
    public UUID getRepositoryId() {
        return repositoryId;
    }

    public void setRepositoryId(UUID repositoryId) {
        this.repositoryId = repositoryId;
    }

    public GitRefUpdateResult success(Boolean success) {
        this.success = success;
        return this;
    }

    /**
     * True if the ref update succeeded, false otherwise
     *
     * @return success
     **/
    @ApiModelProperty(value = "True if the ref update succeeded, false otherwise")
    public Boolean isSuccess() {
        return success;
    }

    public void setSuccess(Boolean success) {
        this.success = success;
    }

    public GitRefUpdateResult updateStatus(UpdateStatusEnum updateStatus) {
        this.updateStatus = updateStatus;
        return this;
    }

    /**
     * Status of the update from the TFS server.
     *
     * @return updateStatus
     **/
    @ApiModelProperty(value = "Status of the update from the TFS server.")
    public UpdateStatusEnum getUpdateStatus() {
        return updateStatus;
    }

    public void setUpdateStatus(UpdateStatusEnum updateStatus) {
        this.updateStatus = updateStatus;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GitRefUpdateResult gitRefUpdateResult = (GitRefUpdateResult) o;
        return Objects.equals(this.customMessage, gitRefUpdateResult.customMessage) &&
                Objects.equals(this.isLocked, gitRefUpdateResult.isLocked) &&
                Objects.equals(this.name, gitRefUpdateResult.name) &&
                Objects.equals(this.newObjectId, gitRefUpdateResult.newObjectId) &&
                Objects.equals(this.oldObjectId, gitRefUpdateResult.oldObjectId) &&
                Objects.equals(this.rejectedBy, gitRefUpdateResult.rejectedBy) &&
                Objects.equals(this.repositoryId, gitRefUpdateResult.repositoryId) &&
                Objects.equals(this.success, gitRefUpdateResult.success) &&
                Objects.equals(this.updateStatus, gitRefUpdateResult.updateStatus);
    }

    @Override
    public int hashCode() {
        return Objects.hash(customMessage, isLocked, name, newObjectId, oldObjectId, rejectedBy, repositoryId, success, updateStatus);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GitRefUpdateResult {\n");

        sb.append("    customMessage: ").append(toIndentedString(customMessage)).append("\n");
        sb.append("    isLocked: ").append(toIndentedString(isLocked)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    newObjectId: ").append(toIndentedString(newObjectId)).append("\n");
        sb.append("    oldObjectId: ").append(toIndentedString(oldObjectId)).append("\n");
        sb.append("    rejectedBy: ").append(toIndentedString(rejectedBy)).append("\n");
        sb.append("    repositoryId: ").append(toIndentedString(repositoryId)).append("\n");
        sb.append("    success: ").append(toIndentedString(success)).append("\n");
        sb.append("    updateStatus: ").append(toIndentedString(updateStatus)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Status of the update from the TFS server.
     */
    public enum UpdateStatusEnum {
        SUCCEEDED("succeeded"),

        FORCEPUSHREQUIRED("forcePushRequired"),

        STALEOLDOBJECTID("staleOldObjectId"),

        INVALIDREFNAME("invalidRefName"),

        UNPROCESSED("unprocessed"),

        UNRESOLVABLETOCOMMIT("unresolvableToCommit"),

        WRITEPERMISSIONREQUIRED("writePermissionRequired"),

        MANAGENOTEPERMISSIONREQUIRED("manageNotePermissionRequired"),

        CREATEBRANCHPERMISSIONREQUIRED("createBranchPermissionRequired"),

        CREATETAGPERMISSIONREQUIRED("createTagPermissionRequired"),

        REJECTEDBYPLUGIN("rejectedByPlugin"),

        LOCKED("locked"),

        REFNAMECONFLICT("refNameConflict"),

        REJECTEDBYPOLICY("rejectedByPolicy"),

        SUCCEEDEDNONEXISTENTREF("succeededNonExistentRef"),

        SUCCEEDEDCORRUPTREF("succeededCorruptRef");

        private String value;

        UpdateStatusEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static UpdateStatusEnum fromValue(String value) {
            for (UpdateStatusEnum b : UpdateStatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

}

