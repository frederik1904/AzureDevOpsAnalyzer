/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import therealflamingo.ado.models.GitRepositoryRef;
import therealflamingo.ado.models.ReferenceLinks;
import therealflamingo.ado.models.TeamProjectReference;

/**
 * 
 */
@ApiModel(description = "")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:17:42.501+02:00")
public class GitRepository {
  @JsonProperty("_links")
  private ReferenceLinks links = null;

  @JsonProperty("defaultBranch")
  private String defaultBranch = null;

  @JsonProperty("id")
  private UUID id = null;

  @JsonProperty("isDisabled")
  private Boolean isDisabled = null;

  @JsonProperty("isFork")
  private Boolean isFork = null;

  @JsonProperty("isInMaintenance")
  private Boolean isInMaintenance = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("parentRepository")
  private GitRepositoryRef parentRepository = null;

  @JsonProperty("project")
  private TeamProjectReference project = null;

  @JsonProperty("remoteUrl")
  private String remoteUrl = null;

  @JsonProperty("size")
  private Long size = null;

  @JsonProperty("sshUrl")
  private String sshUrl = null;

  @JsonProperty("url")
  private String url = null;

  @JsonProperty("validRemoteUrls")
  private List<String> validRemoteUrls = null;

  @JsonProperty("webUrl")
  private String webUrl = null;

  public GitRepository links(ReferenceLinks links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @ApiModelProperty(value = "")
  public ReferenceLinks getLinks() {
    return links;
  }

  public void setLinks(ReferenceLinks links) {
    this.links = links;
  }

  public GitRepository defaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
    return this;
  }

   /**
   * Get defaultBranch
   * @return defaultBranch
  **/
  @ApiModelProperty(value = "")
  public String getDefaultBranch() {
    return defaultBranch;
  }

  public void setDefaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
  }

  public GitRepository id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public GitRepository isDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
    return this;
  }

   /**
   * True if the repository is disabled. False otherwise.
   * @return isDisabled
  **/
  @ApiModelProperty(value = "True if the repository is disabled. False otherwise.")
  public Boolean isIsDisabled() {
    return isDisabled;
  }

  public void setIsDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
  }

  public GitRepository isFork(Boolean isFork) {
    this.isFork = isFork;
    return this;
  }

   /**
   * True if the repository was created as a fork.
   * @return isFork
  **/
  @ApiModelProperty(value = "True if the repository was created as a fork.")
  public Boolean isIsFork() {
    return isFork;
  }

  public void setIsFork(Boolean isFork) {
    this.isFork = isFork;
  }

  public GitRepository isInMaintenance(Boolean isInMaintenance) {
    this.isInMaintenance = isInMaintenance;
    return this;
  }

   /**
   * True if the repository is in maintenance. False otherwise.
   * @return isInMaintenance
  **/
  @ApiModelProperty(value = "True if the repository is in maintenance. False otherwise.")
  public Boolean isIsInMaintenance() {
    return isInMaintenance;
  }

  public void setIsInMaintenance(Boolean isInMaintenance) {
    this.isInMaintenance = isInMaintenance;
  }

  public GitRepository name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public GitRepository parentRepository(GitRepositoryRef parentRepository) {
    this.parentRepository = parentRepository;
    return this;
  }

   /**
   * Get parentRepository
   * @return parentRepository
  **/
  @ApiModelProperty(value = "")
  public GitRepositoryRef getParentRepository() {
    return parentRepository;
  }

  public void setParentRepository(GitRepositoryRef parentRepository) {
    this.parentRepository = parentRepository;
  }

  public GitRepository project(TeamProjectReference project) {
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @ApiModelProperty(value = "")
  public TeamProjectReference getProject() {
    return project;
  }

  public void setProject(TeamProjectReference project) {
    this.project = project;
  }

  public GitRepository remoteUrl(String remoteUrl) {
    this.remoteUrl = remoteUrl;
    return this;
  }

   /**
   * Get remoteUrl
   * @return remoteUrl
  **/
  @ApiModelProperty(value = "")
  public String getRemoteUrl() {
    return remoteUrl;
  }

  public void setRemoteUrl(String remoteUrl) {
    this.remoteUrl = remoteUrl;
  }

  public GitRepository size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Compressed size (bytes) of the repository.
   * @return size
  **/
  @ApiModelProperty(value = "Compressed size (bytes) of the repository.")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public GitRepository sshUrl(String sshUrl) {
    this.sshUrl = sshUrl;
    return this;
  }

   /**
   * Get sshUrl
   * @return sshUrl
  **/
  @ApiModelProperty(value = "")
  public String getSshUrl() {
    return sshUrl;
  }

  public void setSshUrl(String sshUrl) {
    this.sshUrl = sshUrl;
  }

  public GitRepository url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @ApiModelProperty(value = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public GitRepository validRemoteUrls(List<String> validRemoteUrls) {
    this.validRemoteUrls = validRemoteUrls;
    return this;
  }

  public GitRepository addValidRemoteUrlsItem(String validRemoteUrlsItem) {
    if (this.validRemoteUrls == null) {
      this.validRemoteUrls = new ArrayList<String>();
    }
    this.validRemoteUrls.add(validRemoteUrlsItem);
    return this;
  }

   /**
   * Get validRemoteUrls
   * @return validRemoteUrls
  **/
  @ApiModelProperty(value = "")
  public List<String> getValidRemoteUrls() {
    return validRemoteUrls;
  }

  public void setValidRemoteUrls(List<String> validRemoteUrls) {
    this.validRemoteUrls = validRemoteUrls;
  }

  public GitRepository webUrl(String webUrl) {
    this.webUrl = webUrl;
    return this;
  }

   /**
   * Get webUrl
   * @return webUrl
  **/
  @ApiModelProperty(value = "")
  public String getWebUrl() {
    return webUrl;
  }

  public void setWebUrl(String webUrl) {
    this.webUrl = webUrl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitRepository gitRepository = (GitRepository) o;
    return Objects.equals(this.links, gitRepository.links) &&
        Objects.equals(this.defaultBranch, gitRepository.defaultBranch) &&
        Objects.equals(this.id, gitRepository.id) &&
        Objects.equals(this.isDisabled, gitRepository.isDisabled) &&
        Objects.equals(this.isFork, gitRepository.isFork) &&
        Objects.equals(this.isInMaintenance, gitRepository.isInMaintenance) &&
        Objects.equals(this.name, gitRepository.name) &&
        Objects.equals(this.parentRepository, gitRepository.parentRepository) &&
        Objects.equals(this.project, gitRepository.project) &&
        Objects.equals(this.remoteUrl, gitRepository.remoteUrl) &&
        Objects.equals(this.size, gitRepository.size) &&
        Objects.equals(this.sshUrl, gitRepository.sshUrl) &&
        Objects.equals(this.url, gitRepository.url) &&
        Objects.equals(this.validRemoteUrls, gitRepository.validRemoteUrls) &&
        Objects.equals(this.webUrl, gitRepository.webUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, defaultBranch, id, isDisabled, isFork, isInMaintenance, name, parentRepository, project, remoteUrl, size, sshUrl, url, validRemoteUrls, webUrl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitRepository {\n");
    
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    defaultBranch: ").append(toIndentedString(defaultBranch)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isDisabled: ").append(toIndentedString(isDisabled)).append("\n");
    sb.append("    isFork: ").append(toIndentedString(isFork)).append("\n");
    sb.append("    isInMaintenance: ").append(toIndentedString(isInMaintenance)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentRepository: ").append(toIndentedString(parentRepository)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    remoteUrl: ").append(toIndentedString(remoteUrl)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    sshUrl: ").append(toIndentedString(sshUrl)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    validRemoteUrls: ").append(toIndentedString(validRemoteUrls)).append("\n");
    sb.append("    webUrl: ").append(toIndentedString(webUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

