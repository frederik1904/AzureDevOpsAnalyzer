/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.models;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * Optional details to include when returning an item model
 */
@ApiModel(description = "Optional details to include when returning an item model")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:17:42.501+02:00")
public class ItemDetailsOptions {
  @JsonProperty("includeContentMetadata")
  private Boolean includeContentMetadata = null;
  @JsonProperty("recursionLevel")
  private RecursionLevelEnum recursionLevel = null;

  public ItemDetailsOptions includeContentMetadata(Boolean includeContentMetadata) {
    this.includeContentMetadata = includeContentMetadata;
    return this;
  }

  /**
   * If true, include metadata about the file type
   *
   * @return includeContentMetadata
   **/
  @ApiModelProperty(value = "If true, include metadata about the file type")
  public Boolean isIncludeContentMetadata() {
    return includeContentMetadata;
  }

  public void setIncludeContentMetadata(Boolean includeContentMetadata) {
    this.includeContentMetadata = includeContentMetadata;
  }

  public ItemDetailsOptions recursionLevel(RecursionLevelEnum recursionLevel) {
    this.recursionLevel = recursionLevel;
    return this;
  }

  /**
   * Specifies whether to include children (OneLevel), all descendants (Full) or None for folder items
   *
   * @return recursionLevel
   **/
  @ApiModelProperty(value = "Specifies whether to include children (OneLevel), all descendants (Full) or None for folder items")
  public RecursionLevelEnum getRecursionLevel() {
    return recursionLevel;
  }

  public void setRecursionLevel(RecursionLevelEnum recursionLevel) {
    this.recursionLevel = recursionLevel;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemDetailsOptions itemDetailsOptions = (ItemDetailsOptions) o;
    return Objects.equals(this.includeContentMetadata, itemDetailsOptions.includeContentMetadata) &&
            Objects.equals(this.recursionLevel, itemDetailsOptions.recursionLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(includeContentMetadata, recursionLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemDetailsOptions {\n");

    sb.append("    includeContentMetadata: ").append(toIndentedString(includeContentMetadata)).append("\n");
    sb.append("    recursionLevel: ").append(toIndentedString(recursionLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Specifies whether to include children (OneLevel), all descendants (Full) or None for folder items
   */
  public enum RecursionLevelEnum {
    NONE("none"),

    ONELEVEL("oneLevel"),

    ONELEVELPLUSNESTEDEMPTYFOLDERS("oneLevelPlusNestedEmptyFolders"),

    FULL("full");

    private String value;

    RecursionLevelEnum(String value) {
      this.value = value;
    }

    @JsonCreator
    public static RecursionLevelEnum fromValue(String value) {
      for (RecursionLevelEnum b : RecursionLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

}

