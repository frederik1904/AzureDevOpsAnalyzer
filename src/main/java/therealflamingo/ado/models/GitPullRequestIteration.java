/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.models;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.OffsetDateTime;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Provides properties that describe a Git pull request iteration. Iterations are created as a result of creating and pushing updates to a pull request.
 */
@ApiModel(description = "Provides properties that describe a Git pull request iteration. Iterations are created as a result of creating and pushing updates to a pull request.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:17:42.501+02:00")
public class GitPullRequestIteration {
  @JsonProperty("_links")
  private ReferenceLinks links = null;

  @JsonProperty("author")
  private IdentityRef author = null;

  @JsonProperty("changeList")
  private List<GitPullRequestChange> changeList = null;

  @JsonProperty("commits")
  private List<GitCommitRef> commits = null;

  @JsonProperty("commonRefCommit")
  private GitCommitRef commonRefCommit = null;

  @JsonProperty("createdDate")
  private OffsetDateTime createdDate = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("hasMoreCommits")
  private Boolean hasMoreCommits = null;

  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("newTargetRefName")
  private String newTargetRefName = null;

  @JsonProperty("oldTargetRefName")
  private String oldTargetRefName = null;

  @JsonProperty("push")
  private GitPushRef push = null;
  @JsonProperty("reason")
  private ReasonEnum reason = null;
  @JsonProperty("sourceRefCommit")
  private GitCommitRef sourceRefCommit = null;
  @JsonProperty("targetRefCommit")
  private GitCommitRef targetRefCommit = null;
  @JsonProperty("updatedDate")
  private OffsetDateTime updatedDate = null;

  public GitPullRequestIteration links(ReferenceLinks links) {
    this.links = links;
    return this;
  }

  /**
   * A collection of related REST reference links.
   *
   * @return links
   **/
  @ApiModelProperty(value = "A collection of related REST reference links.")
  public ReferenceLinks getLinks() {
    return links;
  }

  public void setLinks(ReferenceLinks links) {
    this.links = links;
  }

  public GitPullRequestIteration author(IdentityRef author) {
    this.author = author;
    return this;
  }

  /**
   * Author of the pull request iteration.
   *
   * @return author
   **/
  @ApiModelProperty(value = "Author of the pull request iteration.")
  public IdentityRef getAuthor() {
    return author;
  }

  public void setAuthor(IdentityRef author) {
    this.author = author;
  }

  public GitPullRequestIteration changeList(List<GitPullRequestChange> changeList) {
    this.changeList = changeList;
    return this;
  }

  public GitPullRequestIteration addChangeListItem(GitPullRequestChange changeListItem) {
    if (this.changeList == null) {
      this.changeList = new ArrayList<GitPullRequestChange>();
    }
    this.changeList.add(changeListItem);
    return this;
  }

  /**
   * Changes included with the pull request iteration.
   *
   * @return changeList
   **/
  @ApiModelProperty(value = "Changes included with the pull request iteration.")
  public List<GitPullRequestChange> getChangeList() {
    return changeList;
  }

  public void setChangeList(List<GitPullRequestChange> changeList) {
    this.changeList = changeList;
  }

  public GitPullRequestIteration commits(List<GitCommitRef> commits) {
    this.commits = commits;
    return this;
  }

  public GitPullRequestIteration addCommitsItem(GitCommitRef commitsItem) {
    if (this.commits == null) {
      this.commits = new ArrayList<GitCommitRef>();
    }
    this.commits.add(commitsItem);
    return this;
  }

  /**
   * The commits included with the pull request iteration.
   *
   * @return commits
   **/
  @ApiModelProperty(value = "The commits included with the pull request iteration.")
  public List<GitCommitRef> getCommits() {
    return commits;
  }

  public void setCommits(List<GitCommitRef> commits) {
    this.commits = commits;
  }

  public GitPullRequestIteration commonRefCommit(GitCommitRef commonRefCommit) {
    this.commonRefCommit = commonRefCommit;
    return this;
  }

  /**
   * The first common Git commit of the source and target refs.
   *
   * @return commonRefCommit
   **/
  @ApiModelProperty(value = "The first common Git commit of the source and target refs.")
  public GitCommitRef getCommonRefCommit() {
    return commonRefCommit;
  }

  public void setCommonRefCommit(GitCommitRef commonRefCommit) {
    this.commonRefCommit = commonRefCommit;
  }

  public GitPullRequestIteration createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The creation date of the pull request iteration.
   *
   * @return createdDate
   **/
  @ApiModelProperty(value = "The creation date of the pull request iteration.")
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }

  public GitPullRequestIteration description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the pull request iteration.
   *
   * @return description
   **/
  @ApiModelProperty(value = "Description of the pull request iteration.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public GitPullRequestIteration hasMoreCommits(Boolean hasMoreCommits) {
    this.hasMoreCommits = hasMoreCommits;
    return this;
  }

  /**
   * Indicates if the Commits property contains a truncated list of commits in this pull request iteration.
   *
   * @return hasMoreCommits
   **/
  @ApiModelProperty(value = "Indicates if the Commits property contains a truncated list of commits in this pull request iteration.")
  public Boolean isHasMoreCommits() {
    return hasMoreCommits;
  }

  public void setHasMoreCommits(Boolean hasMoreCommits) {
    this.hasMoreCommits = hasMoreCommits;
  }

  public GitPullRequestIteration id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the pull request iteration. Iterations are created as a result of creating and pushing updates to a pull request.
   *
   * @return id
   **/
  @ApiModelProperty(value = "ID of the pull request iteration. Iterations are created as a result of creating and pushing updates to a pull request.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public GitPullRequestIteration newTargetRefName(String newTargetRefName) {
    this.newTargetRefName = newTargetRefName;
    return this;
  }

  /**
   * If the iteration reason is Retarget, this is the refName of the new target
   *
   * @return newTargetRefName
   **/
  @ApiModelProperty(value = "If the iteration reason is Retarget, this is the refName of the new target")
  public String getNewTargetRefName() {
    return newTargetRefName;
  }

  public void setNewTargetRefName(String newTargetRefName) {
    this.newTargetRefName = newTargetRefName;
  }

  public GitPullRequestIteration oldTargetRefName(String oldTargetRefName) {
    this.oldTargetRefName = oldTargetRefName;
    return this;
  }

  /**
   * If the iteration reason is Retarget, this is the original target refName
   *
   * @return oldTargetRefName
   **/
  @ApiModelProperty(value = "If the iteration reason is Retarget, this is the original target refName")
  public String getOldTargetRefName() {
    return oldTargetRefName;
  }

  public void setOldTargetRefName(String oldTargetRefName) {
    this.oldTargetRefName = oldTargetRefName;
  }

  public GitPullRequestIteration push(GitPushRef push) {
    this.push = push;
    return this;
  }

  /**
   * The Git push information associated with this pull request iteration.
   *
   * @return push
   **/
  @ApiModelProperty(value = "The Git push information associated with this pull request iteration.")
  public GitPushRef getPush() {
    return push;
  }

  public void setPush(GitPushRef push) {
    this.push = push;
  }

  public GitPullRequestIteration reason(ReasonEnum reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The reason for which the pull request iteration was created.
   *
   * @return reason
   **/
  @ApiModelProperty(value = "The reason for which the pull request iteration was created.")
  public ReasonEnum getReason() {
    return reason;
  }

  public void setReason(ReasonEnum reason) {
    this.reason = reason;
  }

  public GitPullRequestIteration sourceRefCommit(GitCommitRef sourceRefCommit) {
    this.sourceRefCommit = sourceRefCommit;
    return this;
  }

  /**
   * The source Git commit of this iteration.
   *
   * @return sourceRefCommit
   **/
  @ApiModelProperty(value = "The source Git commit of this iteration.")
  public GitCommitRef getSourceRefCommit() {
    return sourceRefCommit;
  }

  public void setSourceRefCommit(GitCommitRef sourceRefCommit) {
    this.sourceRefCommit = sourceRefCommit;
  }

  public GitPullRequestIteration targetRefCommit(GitCommitRef targetRefCommit) {
    this.targetRefCommit = targetRefCommit;
    return this;
  }

  /**
   * The target Git commit of this iteration.
   *
   * @return targetRefCommit
   **/
  @ApiModelProperty(value = "The target Git commit of this iteration.")
  public GitCommitRef getTargetRefCommit() {
    return targetRefCommit;
  }

  public void setTargetRefCommit(GitCommitRef targetRefCommit) {
    this.targetRefCommit = targetRefCommit;
  }

  public GitPullRequestIteration updatedDate(OffsetDateTime updatedDate) {
    this.updatedDate = updatedDate;
    return this;
  }

  /**
   * The updated date of the pull request iteration.
   *
   * @return updatedDate
   **/
  @ApiModelProperty(value = "The updated date of the pull request iteration.")
  public OffsetDateTime getUpdatedDate() {
    return updatedDate;
  }

  public void setUpdatedDate(OffsetDateTime updatedDate) {
    this.updatedDate = updatedDate;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitPullRequestIteration gitPullRequestIteration = (GitPullRequestIteration) o;
    return Objects.equals(this.links, gitPullRequestIteration.links) &&
            Objects.equals(this.author, gitPullRequestIteration.author) &&
            Objects.equals(this.changeList, gitPullRequestIteration.changeList) &&
            Objects.equals(this.commits, gitPullRequestIteration.commits) &&
            Objects.equals(this.commonRefCommit, gitPullRequestIteration.commonRefCommit) &&
            Objects.equals(this.createdDate, gitPullRequestIteration.createdDate) &&
            Objects.equals(this.description, gitPullRequestIteration.description) &&
            Objects.equals(this.hasMoreCommits, gitPullRequestIteration.hasMoreCommits) &&
            Objects.equals(this.id, gitPullRequestIteration.id) &&
            Objects.equals(this.newTargetRefName, gitPullRequestIteration.newTargetRefName) &&
            Objects.equals(this.oldTargetRefName, gitPullRequestIteration.oldTargetRefName) &&
            Objects.equals(this.push, gitPullRequestIteration.push) &&
            Objects.equals(this.reason, gitPullRequestIteration.reason) &&
            Objects.equals(this.sourceRefCommit, gitPullRequestIteration.sourceRefCommit) &&
            Objects.equals(this.targetRefCommit, gitPullRequestIteration.targetRefCommit) &&
            Objects.equals(this.updatedDate, gitPullRequestIteration.updatedDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, author, changeList, commits, commonRefCommit, createdDate, description, hasMoreCommits, id, newTargetRefName, oldTargetRefName, push, reason, sourceRefCommit, targetRefCommit, updatedDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitPullRequestIteration {\n");

    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    changeList: ").append(toIndentedString(changeList)).append("\n");
    sb.append("    commits: ").append(toIndentedString(commits)).append("\n");
    sb.append("    commonRefCommit: ").append(toIndentedString(commonRefCommit)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hasMoreCommits: ").append(toIndentedString(hasMoreCommits)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    newTargetRefName: ").append(toIndentedString(newTargetRefName)).append("\n");
    sb.append("    oldTargetRefName: ").append(toIndentedString(oldTargetRefName)).append("\n");
    sb.append("    push: ").append(toIndentedString(push)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    sourceRefCommit: ").append(toIndentedString(sourceRefCommit)).append("\n");
    sb.append("    targetRefCommit: ").append(toIndentedString(targetRefCommit)).append("\n");
    sb.append("    updatedDate: ").append(toIndentedString(updatedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * The reason for which the pull request iteration was created.
   */
  public enum ReasonEnum {
    PUSH("push"),

    FORCEPUSH("forcePush"),

    CREATE("create"),

    REBASE("rebase"),

    UNKNOWN("unknown"),

    RETARGET("retarget"),

    RESOLVECONFLICTS("resolveConflicts");

    private String value;

    ReasonEnum(String value) {
      this.value = value;
    }

    @JsonCreator
    public static ReasonEnum fromValue(String value) {
      for (ReasonEnum b : ReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

}

