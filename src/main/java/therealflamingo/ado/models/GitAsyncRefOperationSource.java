/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import therealflamingo.ado.models.GitCommitRef;

/**
 * GitAsyncRefOperationSource specifies the pull request or list of commits to use when making a cherry pick and revert operation request. Only one should be provided.
 */
@ApiModel(description = "GitAsyncRefOperationSource specifies the pull request or list of commits to use when making a cherry pick and revert operation request. Only one should be provided.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:17:42.501+02:00")
public class GitAsyncRefOperationSource {
  @JsonProperty("commitList")
  private List<GitCommitRef> commitList = null;

  @JsonProperty("pullRequestId")
  private Integer pullRequestId = null;

  public GitAsyncRefOperationSource commitList(List<GitCommitRef> commitList) {
    this.commitList = commitList;
    return this;
  }

  public GitAsyncRefOperationSource addCommitListItem(GitCommitRef commitListItem) {
    if (this.commitList == null) {
      this.commitList = new ArrayList<GitCommitRef>();
    }
    this.commitList.add(commitListItem);
    return this;
  }

   /**
   * A list of commits to cherry pick or revert
   * @return commitList
  **/
  @ApiModelProperty(value = "A list of commits to cherry pick or revert")
  public List<GitCommitRef> getCommitList() {
    return commitList;
  }

  public void setCommitList(List<GitCommitRef> commitList) {
    this.commitList = commitList;
  }

  public GitAsyncRefOperationSource pullRequestId(Integer pullRequestId) {
    this.pullRequestId = pullRequestId;
    return this;
  }

   /**
   * Id of the pull request to cherry pick or revert
   * @return pullRequestId
  **/
  @ApiModelProperty(value = "Id of the pull request to cherry pick or revert")
  public Integer getPullRequestId() {
    return pullRequestId;
  }

  public void setPullRequestId(Integer pullRequestId) {
    this.pullRequestId = pullRequestId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitAsyncRefOperationSource gitAsyncRefOperationSource = (GitAsyncRefOperationSource) o;
    return Objects.equals(this.commitList, gitAsyncRefOperationSource.commitList) &&
        Objects.equals(this.pullRequestId, gitAsyncRefOperationSource.pullRequestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitList, pullRequestId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitAsyncRefOperationSource {\n");
    
    sb.append("    commitList: ").append(toIndentedString(commitList)).append("\n");
    sb.append("    pullRequestId: ").append(toIndentedString(pullRequestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

