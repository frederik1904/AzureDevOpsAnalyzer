/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.*;

/**
 *
 */
@ApiModel(description = "")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:17:42.501+02:00")
public class GitCommitDiffs {
    @JsonProperty("aheadCount")
    private Integer aheadCount = null;

    @JsonProperty("allChangesIncluded")
    private Boolean allChangesIncluded = null;

    @JsonProperty("baseCommit")
    private String baseCommit = null;

    @JsonProperty("behindCount")
    private Integer behindCount = null;

    @JsonProperty("changeCounts")
    private Map<String, Integer> changeCounts = null;

    @JsonProperty("changes")
    private List<GitChange> changes = null;

    @JsonProperty("commonCommit")
    private String commonCommit = null;

    @JsonProperty("targetCommit")
    private String targetCommit = null;

    public GitCommitDiffs aheadCount(Integer aheadCount) {
        this.aheadCount = aheadCount;
        return this;
    }

    /**
     * Get aheadCount
     *
     * @return aheadCount
     **/
    @ApiModelProperty(value = "")
    public Integer getAheadCount() {
        return aheadCount;
    }

    public void setAheadCount(Integer aheadCount) {
        this.aheadCount = aheadCount;
    }

    public GitCommitDiffs allChangesIncluded(Boolean allChangesIncluded) {
        this.allChangesIncluded = allChangesIncluded;
        return this;
    }

    /**
     * Get allChangesIncluded
     *
     * @return allChangesIncluded
     **/
    @ApiModelProperty(value = "")
    public Boolean isAllChangesIncluded() {
        return allChangesIncluded;
    }

    public void setAllChangesIncluded(Boolean allChangesIncluded) {
        this.allChangesIncluded = allChangesIncluded;
    }

    public GitCommitDiffs baseCommit(String baseCommit) {
        this.baseCommit = baseCommit;
        return this;
    }

    /**
     * Get baseCommit
     *
     * @return baseCommit
     **/
    @ApiModelProperty(value = "")
    public String getBaseCommit() {
        return baseCommit;
    }

    public void setBaseCommit(String baseCommit) {
        this.baseCommit = baseCommit;
    }

    public GitCommitDiffs behindCount(Integer behindCount) {
        this.behindCount = behindCount;
        return this;
    }

    /**
     * Get behindCount
     *
     * @return behindCount
     **/
    @ApiModelProperty(value = "")
    public Integer getBehindCount() {
        return behindCount;
    }

    public void setBehindCount(Integer behindCount) {
        this.behindCount = behindCount;
    }

    public GitCommitDiffs changeCounts(Map<String, Integer> changeCounts) {
        this.changeCounts = changeCounts;
        return this;
    }

    public GitCommitDiffs putChangeCountsItem(String key, Integer changeCountsItem) {
        if (this.changeCounts == null) {
            this.changeCounts = new HashMap<String, Integer>();
        }
        this.changeCounts.put(key, changeCountsItem);
        return this;
    }

    /**
     * Get changeCounts
     *
     * @return changeCounts
     **/
    @ApiModelProperty(value = "")
    public Map<String, Integer> getChangeCounts() {
        return changeCounts;
    }

    public void setChangeCounts(Map<String, Integer> changeCounts) {
        this.changeCounts = changeCounts;
    }

    public GitCommitDiffs changes(List<GitChange> changes) {
        this.changes = changes;
        return this;
    }

    public GitCommitDiffs addChangesItem(GitChange changesItem) {
        if (this.changes == null) {
            this.changes = new ArrayList<GitChange>();
        }
        this.changes.add(changesItem);
        return this;
    }

    /**
     * Get changes
     *
     * @return changes
     **/
    @ApiModelProperty(value = "")
    public List<GitChange> getChanges() {
        return changes;
    }

    public void setChanges(List<GitChange> changes) {
        this.changes = changes;
    }

    public GitCommitDiffs commonCommit(String commonCommit) {
        this.commonCommit = commonCommit;
        return this;
    }

    /**
     * Get commonCommit
     *
     * @return commonCommit
     **/
    @ApiModelProperty(value = "")
    public String getCommonCommit() {
        return commonCommit;
    }

    public void setCommonCommit(String commonCommit) {
        this.commonCommit = commonCommit;
    }

    public GitCommitDiffs targetCommit(String targetCommit) {
        this.targetCommit = targetCommit;
        return this;
    }

    /**
     * Get targetCommit
     *
     * @return targetCommit
     **/
    @ApiModelProperty(value = "")
    public String getTargetCommit() {
        return targetCommit;
    }

    public void setTargetCommit(String targetCommit) {
        this.targetCommit = targetCommit;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GitCommitDiffs gitCommitDiffs = (GitCommitDiffs) o;
        return Objects.equals(this.aheadCount, gitCommitDiffs.aheadCount) &&
                Objects.equals(this.allChangesIncluded, gitCommitDiffs.allChangesIncluded) &&
                Objects.equals(this.baseCommit, gitCommitDiffs.baseCommit) &&
                Objects.equals(this.behindCount, gitCommitDiffs.behindCount) &&
                Objects.equals(this.changeCounts, gitCommitDiffs.changeCounts) &&
                Objects.equals(this.changes, gitCommitDiffs.changes) &&
                Objects.equals(this.commonCommit, gitCommitDiffs.commonCommit) &&
                Objects.equals(this.targetCommit, gitCommitDiffs.targetCommit);
    }

    @Override
    public int hashCode() {
        return Objects.hash(aheadCount, allChangesIncluded, baseCommit, behindCount, changeCounts, changes, commonCommit, targetCommit);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GitCommitDiffs {\n");

        sb.append("    aheadCount: ").append(toIndentedString(aheadCount)).append("\n");
        sb.append("    allChangesIncluded: ").append(toIndentedString(allChangesIncluded)).append("\n");
        sb.append("    baseCommit: ").append(toIndentedString(baseCommit)).append("\n");
        sb.append("    behindCount: ").append(toIndentedString(behindCount)).append("\n");
        sb.append("    changeCounts: ").append(toIndentedString(changeCounts)).append("\n");
        sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
        sb.append("    commonCommit: ").append(toIndentedString(commonCommit)).append("\n");
        sb.append("    targetCommit: ").append(toIndentedString(targetCommit)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

