/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
import therealflamingo.ado.models.GitCommitRef;
import therealflamingo.ado.models.GitPushRef;
import therealflamingo.ado.models.GitRefUpdate;
import therealflamingo.ado.models.GitRepository;
import therealflamingo.ado.models.IdentityRef;
import therealflamingo.ado.models.ReferenceLinks;

/**
 * 
 */
@ApiModel(description = "")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:17:42.501+02:00")
public class GitPush extends GitPushRef {
  @JsonProperty("_links")
  private ReferenceLinks links = null;

  @JsonProperty("date")
  private OffsetDateTime date = null;

  @JsonProperty("pushedBy")
  private IdentityRef pushedBy = null;

  @JsonProperty("pushId")
  private Integer pushId = null;

  @JsonProperty("url")
  private String url = null;

  @JsonProperty("commits")
  private List<GitCommitRef> commits = null;

  @JsonProperty("refUpdates")
  private List<GitRefUpdate> refUpdates = null;

  @JsonProperty("repository")
  private GitRepository repository = null;

  public GitPush links(ReferenceLinks links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @ApiModelProperty(value = "")
  public ReferenceLinks getLinks() {
    return links;
  }

  public void setLinks(ReferenceLinks links) {
    this.links = links;
  }

  public GitPush date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }

  public GitPush pushedBy(IdentityRef pushedBy) {
    this.pushedBy = pushedBy;
    return this;
  }

   /**
   * Get pushedBy
   * @return pushedBy
  **/
  @ApiModelProperty(value = "")
  public IdentityRef getPushedBy() {
    return pushedBy;
  }

  public void setPushedBy(IdentityRef pushedBy) {
    this.pushedBy = pushedBy;
  }

  public GitPush pushId(Integer pushId) {
    this.pushId = pushId;
    return this;
  }

   /**
   * Get pushId
   * @return pushId
  **/
  @ApiModelProperty(value = "")
  public Integer getPushId() {
    return pushId;
  }

  public void setPushId(Integer pushId) {
    this.pushId = pushId;
  }

  public GitPush url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @ApiModelProperty(value = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public GitPush commits(List<GitCommitRef> commits) {
    this.commits = commits;
    return this;
  }

  public GitPush addCommitsItem(GitCommitRef commitsItem) {
    if (this.commits == null) {
      this.commits = new ArrayList<GitCommitRef>();
    }
    this.commits.add(commitsItem);
    return this;
  }

   /**
   * Get commits
   * @return commits
  **/
  @ApiModelProperty(value = "")
  public List<GitCommitRef> getCommits() {
    return commits;
  }

  public void setCommits(List<GitCommitRef> commits) {
    this.commits = commits;
  }

  public GitPush refUpdates(List<GitRefUpdate> refUpdates) {
    this.refUpdates = refUpdates;
    return this;
  }

  public GitPush addRefUpdatesItem(GitRefUpdate refUpdatesItem) {
    if (this.refUpdates == null) {
      this.refUpdates = new ArrayList<GitRefUpdate>();
    }
    this.refUpdates.add(refUpdatesItem);
    return this;
  }

   /**
   * Get refUpdates
   * @return refUpdates
  **/
  @ApiModelProperty(value = "")
  public List<GitRefUpdate> getRefUpdates() {
    return refUpdates;
  }

  public void setRefUpdates(List<GitRefUpdate> refUpdates) {
    this.refUpdates = refUpdates;
  }

  public GitPush repository(GitRepository repository) {
    this.repository = repository;
    return this;
  }

   /**
   * Get repository
   * @return repository
  **/
  @ApiModelProperty(value = "")
  public GitRepository getRepository() {
    return repository;
  }

  public void setRepository(GitRepository repository) {
    this.repository = repository;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitPush gitPush = (GitPush) o;
    return Objects.equals(this.links, gitPush.links) &&
        Objects.equals(this.date, gitPush.date) &&
        Objects.equals(this.pushedBy, gitPush.pushedBy) &&
        Objects.equals(this.pushId, gitPush.pushId) &&
        Objects.equals(this.url, gitPush.url) &&
        Objects.equals(this.commits, gitPush.commits) &&
        Objects.equals(this.refUpdates, gitPush.refUpdates) &&
        Objects.equals(this.repository, gitPush.repository) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, date, pushedBy, pushId, url, commits, refUpdates, repository, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitPush {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    pushedBy: ").append(toIndentedString(pushedBy)).append("\n");
    sb.append("    pushId: ").append(toIndentedString(pushId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    commits: ").append(toIndentedString(commits)).append("\n");
    sb.append("    refUpdates: ").append(toIndentedString(refUpdates)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

