/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.OffsetDateTime;
import therealflamingo.ado.models.GitCommitRef;
import therealflamingo.ado.models.GitMergeOriginRef;
import therealflamingo.ado.models.IdentityRef;
import therealflamingo.ado.models.ReferenceLinks;

/**
 * 
 */
@ApiModel(description = "")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:17:42.501+02:00")
public class GitConflict {
  @JsonProperty("_links")
  private ReferenceLinks links = null;

  @JsonProperty("conflictId")
  private Integer conflictId = null;

  @JsonProperty("conflictPath")
  private String conflictPath = null;

  /**
   * Gets or Sets conflictType
   */
  public enum ConflictTypeEnum {
    NONE("none"),
    
    ADDADD("addAdd"),
    
    ADDRENAME("addRename"),
    
    DELETEEDIT("deleteEdit"),
    
    DELETERENAME("deleteRename"),
    
    DIRECTORYFILE("directoryFile"),
    
    DIRECTORYCHILD("directoryChild"),
    
    EDITDELETE("editDelete"),
    
    EDITEDIT("editEdit"),
    
    FILEDIRECTORY("fileDirectory"),
    
    RENAME1TO2("rename1to2"),
    
    RENAME2TO1("rename2to1"),
    
    RENAMEADD("renameAdd"),
    
    RENAMEDELETE("renameDelete"),
    
    RENAMERENAME("renameRename");

    private String value;

    ConflictTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ConflictTypeEnum fromValue(String value) {
      for (ConflictTypeEnum b : ConflictTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("conflictType")
  private ConflictTypeEnum conflictType = null;

  @JsonProperty("mergeBaseCommit")
  private GitCommitRef mergeBaseCommit = null;

  @JsonProperty("mergeOrigin")
  private GitMergeOriginRef mergeOrigin = null;

  @JsonProperty("mergeSourceCommit")
  private GitCommitRef mergeSourceCommit = null;

  @JsonProperty("mergeTargetCommit")
  private GitCommitRef mergeTargetCommit = null;

  /**
   * Gets or Sets resolutionError
   */
  public enum ResolutionErrorEnum {
    NONE("none"),
    
    MERGECONTENTNOTFOUND("mergeContentNotFound"),
    
    PATHINUSE("pathInUse"),
    
    INVALIDPATH("invalidPath"),
    
    UNKNOWNACTION("unknownAction"),
    
    UNKNOWNMERGETYPE("unknownMergeType"),
    
    OTHERERROR("otherError");

    private String value;

    ResolutionErrorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ResolutionErrorEnum fromValue(String value) {
      for (ResolutionErrorEnum b : ResolutionErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("resolutionError")
  private ResolutionErrorEnum resolutionError = null;

  /**
   * Gets or Sets resolutionStatus
   */
  public enum ResolutionStatusEnum {
    UNRESOLVED("unresolved"),
    
    PARTIALLYRESOLVED("partiallyResolved"),
    
    RESOLVED("resolved");

    private String value;

    ResolutionStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ResolutionStatusEnum fromValue(String value) {
      for (ResolutionStatusEnum b : ResolutionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("resolutionStatus")
  private ResolutionStatusEnum resolutionStatus = null;

  @JsonProperty("resolvedBy")
  private IdentityRef resolvedBy = null;

  @JsonProperty("resolvedDate")
  private OffsetDateTime resolvedDate = null;

  @JsonProperty("url")
  private String url = null;

  public GitConflict links(ReferenceLinks links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @ApiModelProperty(value = "")
  public ReferenceLinks getLinks() {
    return links;
  }

  public void setLinks(ReferenceLinks links) {
    this.links = links;
  }

  public GitConflict conflictId(Integer conflictId) {
    this.conflictId = conflictId;
    return this;
  }

   /**
   * Get conflictId
   * @return conflictId
  **/
  @ApiModelProperty(value = "")
  public Integer getConflictId() {
    return conflictId;
  }

  public void setConflictId(Integer conflictId) {
    this.conflictId = conflictId;
  }

  public GitConflict conflictPath(String conflictPath) {
    this.conflictPath = conflictPath;
    return this;
  }

   /**
   * Get conflictPath
   * @return conflictPath
  **/
  @ApiModelProperty(value = "")
  public String getConflictPath() {
    return conflictPath;
  }

  public void setConflictPath(String conflictPath) {
    this.conflictPath = conflictPath;
  }

  public GitConflict conflictType(ConflictTypeEnum conflictType) {
    this.conflictType = conflictType;
    return this;
  }

   /**
   * Get conflictType
   * @return conflictType
  **/
  @ApiModelProperty(value = "")
  public ConflictTypeEnum getConflictType() {
    return conflictType;
  }

  public void setConflictType(ConflictTypeEnum conflictType) {
    this.conflictType = conflictType;
  }

  public GitConflict mergeBaseCommit(GitCommitRef mergeBaseCommit) {
    this.mergeBaseCommit = mergeBaseCommit;
    return this;
  }

   /**
   * Get mergeBaseCommit
   * @return mergeBaseCommit
  **/
  @ApiModelProperty(value = "")
  public GitCommitRef getMergeBaseCommit() {
    return mergeBaseCommit;
  }

  public void setMergeBaseCommit(GitCommitRef mergeBaseCommit) {
    this.mergeBaseCommit = mergeBaseCommit;
  }

  public GitConflict mergeOrigin(GitMergeOriginRef mergeOrigin) {
    this.mergeOrigin = mergeOrigin;
    return this;
  }

   /**
   * Get mergeOrigin
   * @return mergeOrigin
  **/
  @ApiModelProperty(value = "")
  public GitMergeOriginRef getMergeOrigin() {
    return mergeOrigin;
  }

  public void setMergeOrigin(GitMergeOriginRef mergeOrigin) {
    this.mergeOrigin = mergeOrigin;
  }

  public GitConflict mergeSourceCommit(GitCommitRef mergeSourceCommit) {
    this.mergeSourceCommit = mergeSourceCommit;
    return this;
  }

   /**
   * Get mergeSourceCommit
   * @return mergeSourceCommit
  **/
  @ApiModelProperty(value = "")
  public GitCommitRef getMergeSourceCommit() {
    return mergeSourceCommit;
  }

  public void setMergeSourceCommit(GitCommitRef mergeSourceCommit) {
    this.mergeSourceCommit = mergeSourceCommit;
  }

  public GitConflict mergeTargetCommit(GitCommitRef mergeTargetCommit) {
    this.mergeTargetCommit = mergeTargetCommit;
    return this;
  }

   /**
   * Get mergeTargetCommit
   * @return mergeTargetCommit
  **/
  @ApiModelProperty(value = "")
  public GitCommitRef getMergeTargetCommit() {
    return mergeTargetCommit;
  }

  public void setMergeTargetCommit(GitCommitRef mergeTargetCommit) {
    this.mergeTargetCommit = mergeTargetCommit;
  }

  public GitConflict resolutionError(ResolutionErrorEnum resolutionError) {
    this.resolutionError = resolutionError;
    return this;
  }

   /**
   * Get resolutionError
   * @return resolutionError
  **/
  @ApiModelProperty(value = "")
  public ResolutionErrorEnum getResolutionError() {
    return resolutionError;
  }

  public void setResolutionError(ResolutionErrorEnum resolutionError) {
    this.resolutionError = resolutionError;
  }

  public GitConflict resolutionStatus(ResolutionStatusEnum resolutionStatus) {
    this.resolutionStatus = resolutionStatus;
    return this;
  }

   /**
   * Get resolutionStatus
   * @return resolutionStatus
  **/
  @ApiModelProperty(value = "")
  public ResolutionStatusEnum getResolutionStatus() {
    return resolutionStatus;
  }

  public void setResolutionStatus(ResolutionStatusEnum resolutionStatus) {
    this.resolutionStatus = resolutionStatus;
  }

  public GitConflict resolvedBy(IdentityRef resolvedBy) {
    this.resolvedBy = resolvedBy;
    return this;
  }

   /**
   * Get resolvedBy
   * @return resolvedBy
  **/
  @ApiModelProperty(value = "")
  public IdentityRef getResolvedBy() {
    return resolvedBy;
  }

  public void setResolvedBy(IdentityRef resolvedBy) {
    this.resolvedBy = resolvedBy;
  }

  public GitConflict resolvedDate(OffsetDateTime resolvedDate) {
    this.resolvedDate = resolvedDate;
    return this;
  }

   /**
   * Get resolvedDate
   * @return resolvedDate
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getResolvedDate() {
    return resolvedDate;
  }

  public void setResolvedDate(OffsetDateTime resolvedDate) {
    this.resolvedDate = resolvedDate;
  }

  public GitConflict url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @ApiModelProperty(value = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitConflict gitConflict = (GitConflict) o;
    return Objects.equals(this.links, gitConflict.links) &&
        Objects.equals(this.conflictId, gitConflict.conflictId) &&
        Objects.equals(this.conflictPath, gitConflict.conflictPath) &&
        Objects.equals(this.conflictType, gitConflict.conflictType) &&
        Objects.equals(this.mergeBaseCommit, gitConflict.mergeBaseCommit) &&
        Objects.equals(this.mergeOrigin, gitConflict.mergeOrigin) &&
        Objects.equals(this.mergeSourceCommit, gitConflict.mergeSourceCommit) &&
        Objects.equals(this.mergeTargetCommit, gitConflict.mergeTargetCommit) &&
        Objects.equals(this.resolutionError, gitConflict.resolutionError) &&
        Objects.equals(this.resolutionStatus, gitConflict.resolutionStatus) &&
        Objects.equals(this.resolvedBy, gitConflict.resolvedBy) &&
        Objects.equals(this.resolvedDate, gitConflict.resolvedDate) &&
        Objects.equals(this.url, gitConflict.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, conflictId, conflictPath, conflictType, mergeBaseCommit, mergeOrigin, mergeSourceCommit, mergeTargetCommit, resolutionError, resolutionStatus, resolvedBy, resolvedDate, url);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitConflict {\n");
    
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    conflictId: ").append(toIndentedString(conflictId)).append("\n");
    sb.append("    conflictPath: ").append(toIndentedString(conflictPath)).append("\n");
    sb.append("    conflictType: ").append(toIndentedString(conflictType)).append("\n");
    sb.append("    mergeBaseCommit: ").append(toIndentedString(mergeBaseCommit)).append("\n");
    sb.append("    mergeOrigin: ").append(toIndentedString(mergeOrigin)).append("\n");
    sb.append("    mergeSourceCommit: ").append(toIndentedString(mergeSourceCommit)).append("\n");
    sb.append("    mergeTargetCommit: ").append(toIndentedString(mergeTargetCommit)).append("\n");
    sb.append("    resolutionError: ").append(toIndentedString(resolutionError)).append("\n");
    sb.append("    resolutionStatus: ").append(toIndentedString(resolutionStatus)).append("\n");
    sb.append("    resolvedBy: ").append(toIndentedString(resolvedBy)).append("\n");
    sb.append("    resolvedDate: ").append(toIndentedString(resolvedDate)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

