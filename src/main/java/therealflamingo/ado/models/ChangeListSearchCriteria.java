/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Criteria used in a search for change lists
 */
@ApiModel(description = "Criteria used in a search for change lists")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:17:42.501+02:00")
public class ChangeListSearchCriteria {
  @JsonProperty("compareVersion")
  private String compareVersion = null;

  @JsonProperty("excludeDeletes")
  private Boolean excludeDeletes = null;

  @JsonProperty("followRenames")
  private Boolean followRenames = null;

  @JsonProperty("fromDate")
  private String fromDate = null;

  @JsonProperty("fromVersion")
  private String fromVersion = null;

  @JsonProperty("itemPath")
  private String itemPath = null;

  @JsonProperty("itemPaths")
  private List<String> itemPaths = null;

  @JsonProperty("itemVersion")
  private String itemVersion = null;

  @JsonProperty("skip")
  private Integer skip = null;

  @JsonProperty("toDate")
  private String toDate = null;

  @JsonProperty("top")
  private Integer top = null;

  @JsonProperty("toVersion")
  private String toVersion = null;

  @JsonProperty("user")
  private String user = null;

  public ChangeListSearchCriteria compareVersion(String compareVersion) {
    this.compareVersion = compareVersion;
    return this;
  }

   /**
   * If provided, a version descriptor to compare against base
   * @return compareVersion
  **/
  @ApiModelProperty(value = "If provided, a version descriptor to compare against base")
  public String getCompareVersion() {
    return compareVersion;
  }

  public void setCompareVersion(String compareVersion) {
    this.compareVersion = compareVersion;
  }

  public ChangeListSearchCriteria excludeDeletes(Boolean excludeDeletes) {
    this.excludeDeletes = excludeDeletes;
    return this;
  }

   /**
   * If true, don&#39;t include delete history entries
   * @return excludeDeletes
  **/
  @ApiModelProperty(value = "If true, don't include delete history entries")
  public Boolean isExcludeDeletes() {
    return excludeDeletes;
  }

  public void setExcludeDeletes(Boolean excludeDeletes) {
    this.excludeDeletes = excludeDeletes;
  }

  public ChangeListSearchCriteria followRenames(Boolean followRenames) {
    this.followRenames = followRenames;
    return this;
  }

   /**
   * Whether or not to follow renames for the given item being queried
   * @return followRenames
  **/
  @ApiModelProperty(value = "Whether or not to follow renames for the given item being queried")
  public Boolean isFollowRenames() {
    return followRenames;
  }

  public void setFollowRenames(Boolean followRenames) {
    this.followRenames = followRenames;
  }

  public ChangeListSearchCriteria fromDate(String fromDate) {
    this.fromDate = fromDate;
    return this;
  }

   /**
   * If provided, only include history entries created after this date (string)
   * @return fromDate
  **/
  @ApiModelProperty(value = "If provided, only include history entries created after this date (string)")
  public String getFromDate() {
    return fromDate;
  }

  public void setFromDate(String fromDate) {
    this.fromDate = fromDate;
  }

  public ChangeListSearchCriteria fromVersion(String fromVersion) {
    this.fromVersion = fromVersion;
    return this;
  }

   /**
   * If provided, a version descriptor for the earliest change list to include
   * @return fromVersion
  **/
  @ApiModelProperty(value = "If provided, a version descriptor for the earliest change list to include")
  public String getFromVersion() {
    return fromVersion;
  }

  public void setFromVersion(String fromVersion) {
    this.fromVersion = fromVersion;
  }

  public ChangeListSearchCriteria itemPath(String itemPath) {
    this.itemPath = itemPath;
    return this;
  }

   /**
   * Path of item to search under. If the itemPaths memebr is used then it will take precedence over this.
   * @return itemPath
  **/
  @ApiModelProperty(value = "Path of item to search under. If the itemPaths memebr is used then it will take precedence over this.")
  public String getItemPath() {
    return itemPath;
  }

  public void setItemPath(String itemPath) {
    this.itemPath = itemPath;
  }

  public ChangeListSearchCriteria itemPaths(List<String> itemPaths) {
    this.itemPaths = itemPaths;
    return this;
  }

  public ChangeListSearchCriteria addItemPathsItem(String itemPathsItem) {
    if (this.itemPaths == null) {
      this.itemPaths = new ArrayList<String>();
    }
    this.itemPaths.add(itemPathsItem);
    return this;
  }

   /**
   * List of item paths to search under. If this member is used then itemPath will be ignored.
   * @return itemPaths
  **/
  @ApiModelProperty(value = "List of item paths to search under. If this member is used then itemPath will be ignored.")
  public List<String> getItemPaths() {
    return itemPaths;
  }

  public void setItemPaths(List<String> itemPaths) {
    this.itemPaths = itemPaths;
  }

  public ChangeListSearchCriteria itemVersion(String itemVersion) {
    this.itemVersion = itemVersion;
    return this;
  }

   /**
   * Version of the items to search
   * @return itemVersion
  **/
  @ApiModelProperty(value = "Version of the items to search")
  public String getItemVersion() {
    return itemVersion;
  }

  public void setItemVersion(String itemVersion) {
    this.itemVersion = itemVersion;
  }

  public ChangeListSearchCriteria skip(Integer skip) {
    this.skip = skip;
    return this;
  }

   /**
   * Number of results to skip (used when clicking more...)
   * @return skip
  **/
  @ApiModelProperty(value = "Number of results to skip (used when clicking more...)")
  public Integer getSkip() {
    return skip;
  }

  public void setSkip(Integer skip) {
    this.skip = skip;
  }

  public ChangeListSearchCriteria toDate(String toDate) {
    this.toDate = toDate;
    return this;
  }

   /**
   * If provided, only include history entries created before this date (string)
   * @return toDate
  **/
  @ApiModelProperty(value = "If provided, only include history entries created before this date (string)")
  public String getToDate() {
    return toDate;
  }

  public void setToDate(String toDate) {
    this.toDate = toDate;
  }

  public ChangeListSearchCriteria top(Integer top) {
    this.top = top;
    return this;
  }

   /**
   * If provided, the maximum number of history entries to return
   * @return top
  **/
  @ApiModelProperty(value = "If provided, the maximum number of history entries to return")
  public Integer getTop() {
    return top;
  }

  public void setTop(Integer top) {
    this.top = top;
  }

  public ChangeListSearchCriteria toVersion(String toVersion) {
    this.toVersion = toVersion;
    return this;
  }

   /**
   * If provided, a version descriptor for the latest change list to include
   * @return toVersion
  **/
  @ApiModelProperty(value = "If provided, a version descriptor for the latest change list to include")
  public String getToVersion() {
    return toVersion;
  }

  public void setToVersion(String toVersion) {
    this.toVersion = toVersion;
  }

  public ChangeListSearchCriteria user(String user) {
    this.user = user;
    return this;
  }

   /**
   * Alias or display name of user who made the changes
   * @return user
  **/
  @ApiModelProperty(value = "Alias or display name of user who made the changes")
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangeListSearchCriteria changeListSearchCriteria = (ChangeListSearchCriteria) o;
    return Objects.equals(this.compareVersion, changeListSearchCriteria.compareVersion) &&
        Objects.equals(this.excludeDeletes, changeListSearchCriteria.excludeDeletes) &&
        Objects.equals(this.followRenames, changeListSearchCriteria.followRenames) &&
        Objects.equals(this.fromDate, changeListSearchCriteria.fromDate) &&
        Objects.equals(this.fromVersion, changeListSearchCriteria.fromVersion) &&
        Objects.equals(this.itemPath, changeListSearchCriteria.itemPath) &&
        Objects.equals(this.itemPaths, changeListSearchCriteria.itemPaths) &&
        Objects.equals(this.itemVersion, changeListSearchCriteria.itemVersion) &&
        Objects.equals(this.skip, changeListSearchCriteria.skip) &&
        Objects.equals(this.toDate, changeListSearchCriteria.toDate) &&
        Objects.equals(this.top, changeListSearchCriteria.top) &&
        Objects.equals(this.toVersion, changeListSearchCriteria.toVersion) &&
        Objects.equals(this.user, changeListSearchCriteria.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compareVersion, excludeDeletes, followRenames, fromDate, fromVersion, itemPath, itemPaths, itemVersion, skip, toDate, top, toVersion, user);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangeListSearchCriteria {\n");
    
    sb.append("    compareVersion: ").append(toIndentedString(compareVersion)).append("\n");
    sb.append("    excludeDeletes: ").append(toIndentedString(excludeDeletes)).append("\n");
    sb.append("    followRenames: ").append(toIndentedString(followRenames)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    fromVersion: ").append(toIndentedString(fromVersion)).append("\n");
    sb.append("    itemPath: ").append(toIndentedString(itemPath)).append("\n");
    sb.append("    itemPaths: ").append(toIndentedString(itemPaths)).append("\n");
    sb.append("    itemVersion: ").append(toIndentedString(itemVersion)).append("\n");
    sb.append("    skip: ").append(toIndentedString(skip)).append("\n");
    sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("    toVersion: ").append(toIndentedString(toVersion)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

