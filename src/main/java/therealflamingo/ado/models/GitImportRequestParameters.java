/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;
import java.util.UUID;

/**
 * Parameters for creating an import request
 */
@ApiModel(description = "Parameters for creating an import request")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:17:42.501+02:00")
public class GitImportRequestParameters {
    @JsonProperty("deleteServiceEndpointAfterImportIsDone")
    private Boolean deleteServiceEndpointAfterImportIsDone = null;

    @JsonProperty("gitSource")
    private GitImportGitSource gitSource = null;

    @JsonProperty("serviceEndpointId")
    private UUID serviceEndpointId = null;

    @JsonProperty("tfvcSource")
    private GitImportTfvcSource tfvcSource = null;

    public GitImportRequestParameters deleteServiceEndpointAfterImportIsDone(Boolean deleteServiceEndpointAfterImportIsDone) {
        this.deleteServiceEndpointAfterImportIsDone = deleteServiceEndpointAfterImportIsDone;
        return this;
    }

    /**
     * Option to delete service endpoint when import is done
     *
     * @return deleteServiceEndpointAfterImportIsDone
     **/
    @ApiModelProperty(value = "Option to delete service endpoint when import is done")
    public Boolean isDeleteServiceEndpointAfterImportIsDone() {
        return deleteServiceEndpointAfterImportIsDone;
    }

    public void setDeleteServiceEndpointAfterImportIsDone(Boolean deleteServiceEndpointAfterImportIsDone) {
        this.deleteServiceEndpointAfterImportIsDone = deleteServiceEndpointAfterImportIsDone;
    }

    public GitImportRequestParameters gitSource(GitImportGitSource gitSource) {
        this.gitSource = gitSource;
        return this;
    }

    /**
     * Source for importing git repository
     *
     * @return gitSource
     **/
    @ApiModelProperty(value = "Source for importing git repository")
    public GitImportGitSource getGitSource() {
        return gitSource;
    }

    public void setGitSource(GitImportGitSource gitSource) {
        this.gitSource = gitSource;
    }

    public GitImportRequestParameters serviceEndpointId(UUID serviceEndpointId) {
        this.serviceEndpointId = serviceEndpointId;
        return this;
    }

    /**
     * Service Endpoint for connection to external endpoint
     *
     * @return serviceEndpointId
     **/
    @ApiModelProperty(value = "Service Endpoint for connection to external endpoint")
    public UUID getServiceEndpointId() {
        return serviceEndpointId;
    }

    public void setServiceEndpointId(UUID serviceEndpointId) {
        this.serviceEndpointId = serviceEndpointId;
    }

    public GitImportRequestParameters tfvcSource(GitImportTfvcSource tfvcSource) {
        this.tfvcSource = tfvcSource;
        return this;
    }

    /**
     * Source for importing tfvc repository
     *
     * @return tfvcSource
     **/
    @ApiModelProperty(value = "Source for importing tfvc repository")
    public GitImportTfvcSource getTfvcSource() {
        return tfvcSource;
    }

    public void setTfvcSource(GitImportTfvcSource tfvcSource) {
        this.tfvcSource = tfvcSource;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GitImportRequestParameters gitImportRequestParameters = (GitImportRequestParameters) o;
        return Objects.equals(this.deleteServiceEndpointAfterImportIsDone, gitImportRequestParameters.deleteServiceEndpointAfterImportIsDone) &&
                Objects.equals(this.gitSource, gitImportRequestParameters.gitSource) &&
                Objects.equals(this.serviceEndpointId, gitImportRequestParameters.serviceEndpointId) &&
                Objects.equals(this.tfvcSource, gitImportRequestParameters.tfvcSource);
    }

    @Override
    public int hashCode() {
        return Objects.hash(deleteServiceEndpointAfterImportIsDone, gitSource, serviceEndpointId, tfvcSource);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GitImportRequestParameters {\n");

        sb.append("    deleteServiceEndpointAfterImportIsDone: ").append(toIndentedString(deleteServiceEndpointAfterImportIsDone)).append("\n");
        sb.append("    gitSource: ").append(toIndentedString(gitSource)).append("\n");
        sb.append("    serviceEndpointId: ").append(toIndentedString(serviceEndpointId)).append("\n");
        sb.append("    tfvcSource: ").append(toIndentedString(tfvcSource)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

