/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 *
 */
@ApiModel(description = "")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:17:42.501+02:00")
public class GitTreeDiff {
  @JsonProperty("baseTreeId")
  private String baseTreeId = null;

  @JsonProperty("diffEntries")
  private List<GitTreeDiffEntry> diffEntries = null;

  @JsonProperty("targetTreeId")
  private String targetTreeId = null;

  @JsonProperty("url")
  private String url = null;

  public GitTreeDiff baseTreeId(String baseTreeId) {
    this.baseTreeId = baseTreeId;
    return this;
  }

  /**
   * ObjectId of the base tree of this diff.
   *
   * @return baseTreeId
   **/
  @ApiModelProperty(value = "ObjectId of the base tree of this diff.")
  public String getBaseTreeId() {
    return baseTreeId;
  }

  public void setBaseTreeId(String baseTreeId) {
    this.baseTreeId = baseTreeId;
  }

  public GitTreeDiff diffEntries(List<GitTreeDiffEntry> diffEntries) {
    this.diffEntries = diffEntries;
    return this;
  }

  public GitTreeDiff addDiffEntriesItem(GitTreeDiffEntry diffEntriesItem) {
    if (this.diffEntries == null) {
      this.diffEntries = new ArrayList<GitTreeDiffEntry>();
    }
    this.diffEntries.add(diffEntriesItem);
    return this;
  }

  /**
   * List of tree entries that differ between the base and target tree.  Renames and object type changes are returned as a delete for the old object and add for the new object.  If a continuation token is returned in the response header, some tree entries are yet to be processed and may yield more diff entries. If the continuation token is not returned all the diff entries have been included in this response.
   *
   * @return diffEntries
   **/
  @ApiModelProperty(value = "List of tree entries that differ between the base and target tree.  Renames and object type changes are returned as a delete for the old object and add for the new object.  If a continuation token is returned in the response header, some tree entries are yet to be processed and may yield more diff entries. If the continuation token is not returned all the diff entries have been included in this response.")
  public List<GitTreeDiffEntry> getDiffEntries() {
    return diffEntries;
  }

  public void setDiffEntries(List<GitTreeDiffEntry> diffEntries) {
    this.diffEntries = diffEntries;
  }

  public GitTreeDiff targetTreeId(String targetTreeId) {
    this.targetTreeId = targetTreeId;
    return this;
  }

  /**
   * ObjectId of the target tree of this diff.
   *
   * @return targetTreeId
   **/
  @ApiModelProperty(value = "ObjectId of the target tree of this diff.")
  public String getTargetTreeId() {
    return targetTreeId;
  }

  public void setTargetTreeId(String targetTreeId) {
    this.targetTreeId = targetTreeId;
  }

  public GitTreeDiff url(String url) {
    this.url = url;
    return this;
  }

  /**
   * REST Url to this resource.
   *
   * @return url
   **/
  @ApiModelProperty(value = "REST Url to this resource.")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitTreeDiff gitTreeDiff = (GitTreeDiff) o;
    return Objects.equals(this.baseTreeId, gitTreeDiff.baseTreeId) &&
            Objects.equals(this.diffEntries, gitTreeDiff.diffEntries) &&
            Objects.equals(this.targetTreeId, gitTreeDiff.targetTreeId) &&
            Objects.equals(this.url, gitTreeDiff.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseTreeId, diffEntries, targetTreeId, url);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitTreeDiff {\n");

    sb.append("    baseTreeId: ").append(toIndentedString(baseTreeId)).append("\n");
    sb.append("    diffEntries: ").append(toIndentedString(diffEntries)).append("\n");
    sb.append("    targetTreeId: ").append(toIndentedString(targetTreeId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

