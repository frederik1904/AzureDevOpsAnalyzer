/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import therealflamingo.ado.models.CommentIterationContext;
import therealflamingo.ado.models.CommentTrackingCriteria;

/**
 * Comment thread context contains details about what diffs were being viewed at the time of thread creation and whether or not the thread has been tracked from that original diff.
 */
@ApiModel(description = "Comment thread context contains details about what diffs were being viewed at the time of thread creation and whether or not the thread has been tracked from that original diff.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:17:42.501+02:00")
public class GitPullRequestCommentThreadContext {
  @JsonProperty("changeTrackingId")
  private Integer changeTrackingId = null;

  @JsonProperty("iterationContext")
  private CommentIterationContext iterationContext = null;

  @JsonProperty("trackingCriteria")
  private CommentTrackingCriteria trackingCriteria = null;

  public GitPullRequestCommentThreadContext changeTrackingId(Integer changeTrackingId) {
    this.changeTrackingId = changeTrackingId;
    return this;
  }

   /**
   * Used to track a comment across iterations. This value can be found by looking at the iteration&#39;s changes list. Must be set for pull requests with iteration support. Otherwise, it&#39;s not required for &#39;legacy&#39; pull requests.
   * @return changeTrackingId
  **/
  @ApiModelProperty(value = "Used to track a comment across iterations. This value can be found by looking at the iteration's changes list. Must be set for pull requests with iteration support. Otherwise, it's not required for 'legacy' pull requests.")
  public Integer getChangeTrackingId() {
    return changeTrackingId;
  }

  public void setChangeTrackingId(Integer changeTrackingId) {
    this.changeTrackingId = changeTrackingId;
  }

  public GitPullRequestCommentThreadContext iterationContext(CommentIterationContext iterationContext) {
    this.iterationContext = iterationContext;
    return this;
  }

   /**
   * The iteration context being viewed when the thread was created.
   * @return iterationContext
  **/
  @ApiModelProperty(value = "The iteration context being viewed when the thread was created.")
  public CommentIterationContext getIterationContext() {
    return iterationContext;
  }

  public void setIterationContext(CommentIterationContext iterationContext) {
    this.iterationContext = iterationContext;
  }

  public GitPullRequestCommentThreadContext trackingCriteria(CommentTrackingCriteria trackingCriteria) {
    this.trackingCriteria = trackingCriteria;
    return this;
  }

   /**
   * The criteria used to track this thread. If this property is filled out when the thread is returned, then the thread has been tracked from its original location using the given criteria.
   * @return trackingCriteria
  **/
  @ApiModelProperty(value = "The criteria used to track this thread. If this property is filled out when the thread is returned, then the thread has been tracked from its original location using the given criteria.")
  public CommentTrackingCriteria getTrackingCriteria() {
    return trackingCriteria;
  }

  public void setTrackingCriteria(CommentTrackingCriteria trackingCriteria) {
    this.trackingCriteria = trackingCriteria;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitPullRequestCommentThreadContext gitPullRequestCommentThreadContext = (GitPullRequestCommentThreadContext) o;
    return Objects.equals(this.changeTrackingId, gitPullRequestCommentThreadContext.changeTrackingId) &&
        Objects.equals(this.iterationContext, gitPullRequestCommentThreadContext.iterationContext) &&
        Objects.equals(this.trackingCriteria, gitPullRequestCommentThreadContext.trackingCriteria);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeTrackingId, iterationContext, trackingCriteria);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitPullRequestCommentThreadContext {\n");
    
    sb.append("    changeTrackingId: ").append(toIndentedString(changeTrackingId)).append("\n");
    sb.append("    iterationContext: ").append(toIndentedString(iterationContext)).append("\n");
    sb.append("    trackingCriteria: ").append(toIndentedString(trackingCriteria)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

