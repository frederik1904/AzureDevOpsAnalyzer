/*
 * Git
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package therealflamingo.ado.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import therealflamingo.ado.models.CommentPosition;

/**
 * Comment tracking criteria is used to identify which iteration context the thread has been tracked to (if any) along with some detail about the original position and filename.
 */
@ApiModel(description = "Comment tracking criteria is used to identify which iteration context the thread has been tracked to (if any) along with some detail about the original position and filename.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:17:42.501+02:00")
public class CommentTrackingCriteria {
  @JsonProperty("firstComparingIteration")
  private Integer firstComparingIteration = null;

  @JsonProperty("origFilePath")
  private String origFilePath = null;

  @JsonProperty("origLeftFileEnd")
  private CommentPosition origLeftFileEnd = null;

  @JsonProperty("origLeftFileStart")
  private CommentPosition origLeftFileStart = null;

  @JsonProperty("origRightFileEnd")
  private CommentPosition origRightFileEnd = null;

  @JsonProperty("origRightFileStart")
  private CommentPosition origRightFileStart = null;

  @JsonProperty("secondComparingIteration")
  private Integer secondComparingIteration = null;

  public CommentTrackingCriteria firstComparingIteration(Integer firstComparingIteration) {
    this.firstComparingIteration = firstComparingIteration;
    return this;
  }

   /**
   * The iteration of the file on the left side of the diff that the thread will be tracked to. Threads were tracked if this is greater than 0.
   * @return firstComparingIteration
  **/
  @ApiModelProperty(value = "The iteration of the file on the left side of the diff that the thread will be tracked to. Threads were tracked if this is greater than 0.")
  public Integer getFirstComparingIteration() {
    return firstComparingIteration;
  }

  public void setFirstComparingIteration(Integer firstComparingIteration) {
    this.firstComparingIteration = firstComparingIteration;
  }

  public CommentTrackingCriteria origFilePath(String origFilePath) {
    this.origFilePath = origFilePath;
    return this;
  }

   /**
   * Original filepath the thread was created on before tracking. This will be different than the current thread filepath if the file in question was renamed in a later iteration.
   * @return origFilePath
  **/
  @ApiModelProperty(value = "Original filepath the thread was created on before tracking. This will be different than the current thread filepath if the file in question was renamed in a later iteration.")
  public String getOrigFilePath() {
    return origFilePath;
  }

  public void setOrigFilePath(String origFilePath) {
    this.origFilePath = origFilePath;
  }

  public CommentTrackingCriteria origLeftFileEnd(CommentPosition origLeftFileEnd) {
    this.origLeftFileEnd = origLeftFileEnd;
    return this;
  }

   /**
   * Original position of last character of the thread&#39;s span in left file.
   * @return origLeftFileEnd
  **/
  @ApiModelProperty(value = "Original position of last character of the thread's span in left file.")
  public CommentPosition getOrigLeftFileEnd() {
    return origLeftFileEnd;
  }

  public void setOrigLeftFileEnd(CommentPosition origLeftFileEnd) {
    this.origLeftFileEnd = origLeftFileEnd;
  }

  public CommentTrackingCriteria origLeftFileStart(CommentPosition origLeftFileStart) {
    this.origLeftFileStart = origLeftFileStart;
    return this;
  }

   /**
   * Original position of first character of the thread&#39;s span in left file.
   * @return origLeftFileStart
  **/
  @ApiModelProperty(value = "Original position of first character of the thread's span in left file.")
  public CommentPosition getOrigLeftFileStart() {
    return origLeftFileStart;
  }

  public void setOrigLeftFileStart(CommentPosition origLeftFileStart) {
    this.origLeftFileStart = origLeftFileStart;
  }

  public CommentTrackingCriteria origRightFileEnd(CommentPosition origRightFileEnd) {
    this.origRightFileEnd = origRightFileEnd;
    return this;
  }

   /**
   * Original position of last character of the thread&#39;s span in right file.
   * @return origRightFileEnd
  **/
  @ApiModelProperty(value = "Original position of last character of the thread's span in right file.")
  public CommentPosition getOrigRightFileEnd() {
    return origRightFileEnd;
  }

  public void setOrigRightFileEnd(CommentPosition origRightFileEnd) {
    this.origRightFileEnd = origRightFileEnd;
  }

  public CommentTrackingCriteria origRightFileStart(CommentPosition origRightFileStart) {
    this.origRightFileStart = origRightFileStart;
    return this;
  }

   /**
   * Original position of first character of the thread&#39;s span in right file.
   * @return origRightFileStart
  **/
  @ApiModelProperty(value = "Original position of first character of the thread's span in right file.")
  public CommentPosition getOrigRightFileStart() {
    return origRightFileStart;
  }

  public void setOrigRightFileStart(CommentPosition origRightFileStart) {
    this.origRightFileStart = origRightFileStart;
  }

  public CommentTrackingCriteria secondComparingIteration(Integer secondComparingIteration) {
    this.secondComparingIteration = secondComparingIteration;
    return this;
  }

   /**
   * The iteration of the file on the right side of the diff that the thread will be tracked to. Threads were tracked if this is greater than 0.
   * @return secondComparingIteration
  **/
  @ApiModelProperty(value = "The iteration of the file on the right side of the diff that the thread will be tracked to. Threads were tracked if this is greater than 0.")
  public Integer getSecondComparingIteration() {
    return secondComparingIteration;
  }

  public void setSecondComparingIteration(Integer secondComparingIteration) {
    this.secondComparingIteration = secondComparingIteration;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommentTrackingCriteria commentTrackingCriteria = (CommentTrackingCriteria) o;
    return Objects.equals(this.firstComparingIteration, commentTrackingCriteria.firstComparingIteration) &&
        Objects.equals(this.origFilePath, commentTrackingCriteria.origFilePath) &&
        Objects.equals(this.origLeftFileEnd, commentTrackingCriteria.origLeftFileEnd) &&
        Objects.equals(this.origLeftFileStart, commentTrackingCriteria.origLeftFileStart) &&
        Objects.equals(this.origRightFileEnd, commentTrackingCriteria.origRightFileEnd) &&
        Objects.equals(this.origRightFileStart, commentTrackingCriteria.origRightFileStart) &&
        Objects.equals(this.secondComparingIteration, commentTrackingCriteria.secondComparingIteration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstComparingIteration, origFilePath, origLeftFileEnd, origLeftFileStart, origRightFileEnd, origRightFileStart, secondComparingIteration);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommentTrackingCriteria {\n");
    
    sb.append("    firstComparingIteration: ").append(toIndentedString(firstComparingIteration)).append("\n");
    sb.append("    origFilePath: ").append(toIndentedString(origFilePath)).append("\n");
    sb.append("    origLeftFileEnd: ").append(toIndentedString(origLeftFileEnd)).append("\n");
    sb.append("    origLeftFileStart: ").append(toIndentedString(origLeftFileStart)).append("\n");
    sb.append("    origRightFileEnd: ").append(toIndentedString(origRightFileEnd)).append("\n");
    sb.append("    origRightFileStart: ").append(toIndentedString(origRightFileStart)).append("\n");
    sb.append("    secondComparingIteration: ").append(toIndentedString(secondComparingIteration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

